var cov_15w9yopde=function(){var path="/opt/repos/app-owbn/lib/rpc/games/crudGames.js";var hash="911adc277d816fdca864339fbe968998eb1682e6";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/opt/repos/app-owbn/lib/rpc/games/crudGames.js",statementMap:{"0":{start:{line:2,column:21},end:{line:2,column:46}},"1":{start:{line:3,column:19},end:{line:3,column:30}},"2":{start:{line:4,column:11},end:{line:4,column:42}},"3":{start:{line:15,column:4},end:{line:15,column:61}},"4":{start:{line:16,column:4},end:{line:16,column:87}},"5":{start:{line:17,column:31},end:{line:22,column:6}},"6":{start:{line:26,column:4},end:{line:31,column:5}},"7":{start:{line:27,column:8},end:{line:27,column:80}},"8":{start:{line:28,column:8},end:{line:28,column:69}},"9":{start:{line:29,column:8},end:{line:29,column:46}},"10":{start:{line:30,column:8},end:{line:30,column:34}},"11":{start:{line:35,column:4},end:{line:58,column:5}},"12":{start:{line:36,column:22},end:{line:38,column:9}},"13":{start:{line:40,column:8},end:{line:40,column:76}},"14":{start:{line:41,column:26},end:{line:41,column:49}},"15":{start:{line:43,column:8},end:{line:53,column:9}},"16":{start:{line:44,column:12},end:{line:44,column:91}},"17":{start:{line:46,column:12},end:{line:46,column:37}},"18":{start:{line:47,column:12},end:{line:47,column:62}},"19":{start:{line:48,column:12},end:{line:48,column:50}},"20":{start:{line:50,column:12},end:{line:50,column:87}},"21":{start:{line:51,column:12},end:{line:51,column:70}},"22":{start:{line:52,column:12},end:{line:52,column:50}},"23":{start:{line:55,column:8},end:{line:55,column:79}},"24":{start:{line:56,column:8},end:{line:56,column:59}},"25":{start:{line:57,column:8},end:{line:57,column:46}},"26":{start:{line:61,column:4},end:{line:61,column:106}},"27":{start:{line:62,column:4},end:{line:62,column:30}},"28":{start:{line:68,column:4},end:{line:68,column:93}},"29":{start:{line:70,column:31},end:{line:75,column:6}},"30":{start:{line:79,column:4},end:{line:84,column:5}},"31":{start:{line:80,column:8},end:{line:80,column:80}},"32":{start:{line:81,column:8},end:{line:81,column:69}},"33":{start:{line:82,column:8},end:{line:82,column:46}},"34":{start:{line:83,column:8},end:{line:83,column:34}},"35":{start:{line:87,column:26},end:{line:87,column:44}},"36":{start:{line:91,column:22},end:{line:93,column:9}},"37":{start:{line:95,column:8},end:{line:95,column:76}},"38":{start:{line:96,column:26},end:{line:96,column:49}},"39":{start:{line:98,column:8},end:{line:126,column:9}},"40":{start:{line:99,column:12},end:{line:99,column:89}},"41":{start:{line:102,column:36},end:{line:108,column:15}},"42":{start:{line:110,column:12},end:{line:110,column:96}},"43":{start:{line:111,column:12},end:{line:111,column:108}},"44":{start:{line:113,column:37},end:{line:113,column:72}},"45":{start:{line:114,column:12},end:{line:114,column:118}},"46":{start:{line:117,column:12},end:{line:119,column:13}},"47":{start:{line:118,column:16},end:{line:118,column:112}},"48":{start:{line:120,column:12},end:{line:120,column:62}},"49":{start:{line:121,column:12},end:{line:121,column:50}},"50":{start:{line:123,column:12},end:{line:123,column:95}},"51":{start:{line:124,column:12},end:{line:124,column:83}},"52":{start:{line:125,column:12},end:{line:125,column:50}},"53":{start:{line:129,column:4},end:{line:129,column:30}},"54":{start:{line:134,column:4},end:{line:134,column:93}},"55":{start:{line:136,column:31},end:{line:141,column:6}},"56":{start:{line:145,column:4},end:{line:150,column:5}},"57":{start:{line:146,column:8},end:{line:146,column:80}},"58":{start:{line:147,column:8},end:{line:147,column:69}},"59":{start:{line:148,column:8},end:{line:148,column:46}},"60":{start:{line:149,column:8},end:{line:149,column:34}},"61":{start:{line:154,column:22},end:{line:156,column:9}},"62":{start:{line:158,column:8},end:{line:158,column:76}},"63":{start:{line:159,column:26},end:{line:159,column:49}},"64":{start:{line:161,column:8},end:{line:177,column:9}},"65":{start:{line:162,column:12},end:{line:162,column:89}},"66":{start:{line:163,column:12},end:{line:172,column:13}},"67":{start:{line:165,column:16},end:{line:165,column:42}},"68":{start:{line:166,column:16},end:{line:166,column:66}},"69":{start:{line:167,column:16},end:{line:167,column:54}},"70":{start:{line:169,column:16},end:{line:169,column:103}},"71":{start:{line:170,column:16},end:{line:170,column:67}},"72":{start:{line:171,column:16},end:{line:171,column:54}},"73":{start:{line:174,column:12},end:{line:174,column:95}},"74":{start:{line:175,column:12},end:{line:175,column:83}},"75":{start:{line:176,column:12},end:{line:176,column:50}},"76":{start:{line:180,column:4},end:{line:180,column:30}},"77":{start:{line:183,column:0},end:{line:183,column:56}}},fnMap:{"0":{name:"createInfo",decl:{start:{line:14,column:15},end:{line:14,column:25}},loc:{start:{line:14,column:32},end:{line:63,column:1}},line:14},"1":{name:"updateInfo",decl:{start:{line:67,column:15},end:{line:67,column:25}},loc:{start:{line:67,column:38},end:{line:130,column:1}},line:67},"2":{name:"deleteInfo",decl:{start:{line:133,column:15},end:{line:133,column:25}},loc:{start:{line:133,column:38},end:{line:181,column:1}},line:133}},branchMap:{"0":{loc:{start:{line:26,column:4},end:{line:31,column:5}},type:"if",locations:[{start:{line:26,column:4},end:{line:31,column:5}},{start:{line:26,column:4},end:{line:31,column:5}}],line:26},"1":{loc:{start:{line:43,column:8},end:{line:53,column:9}},type:"if",locations:[{start:{line:43,column:8},end:{line:53,column:9}},{start:{line:43,column:8},end:{line:53,column:9}}],line:43},"2":{loc:{start:{line:79,column:4},end:{line:84,column:5}},type:"if",locations:[{start:{line:79,column:4},end:{line:84,column:5}},{start:{line:79,column:4},end:{line:84,column:5}}],line:79},"3":{loc:{start:{line:98,column:8},end:{line:126,column:9}},type:"if",locations:[{start:{line:98,column:8},end:{line:126,column:9}},{start:{line:98,column:8},end:{line:126,column:9}}],line:98},"4":{loc:{start:{line:117,column:12},end:{line:119,column:13}},type:"if",locations:[{start:{line:117,column:12},end:{line:119,column:13}},{start:{line:117,column:12},end:{line:119,column:13}}],line:117},"5":{loc:{start:{line:145,column:4},end:{line:150,column:5}},type:"if",locations:[{start:{line:145,column:4},end:{line:150,column:5}},{start:{line:145,column:4},end:{line:150,column:5}}],line:145},"6":{loc:{start:{line:161,column:8},end:{line:177,column:9}},type:"if",locations:[{start:{line:161,column:8},end:{line:177,column:9}},{start:{line:161,column:8},end:{line:177,column:9}}],line:161}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"911adc277d816fdca864339fbe968998eb1682e6"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();/* globals log database */const{Response}=(cov_15w9yopde.s[0]++,require('../../Response'));const Collection=(cov_15w9yopde.s[1]++,'owbnGames');const db=(cov_15w9yopde.s[2]++,database.collection(Collection));/**
 * Tests to see if the devices are synced.
 * @param {object} info Game Info
 * @returns {Object} Returned object showing success or failure of action
 */ // Start Create Info Function
async function createInfo(info){cov_15w9yopde.f[0]++;cov_15w9yopde.s[3]++;log.debug('Starting: crudGame.createInfo. info object ');cov_15w9yopde.s[4]++;log.trace(`Starting: crudGame.createInfo. info object : ${JSON.stringify(info)} `);const validationResponse=(cov_15w9yopde.s[5]++,new Response({from:'createInfo',responseCode:400,message:'',step:'Create Info'}));// Updates must always include game name.  Without those, there can be no update.
// Throw an error if his happens.
cov_15w9yopde.s[6]++;if(!info.name){cov_15w9yopde.b[0][0]++;cov_15w9yopde.s[7]++;log.debug('Update: crudGame.createInfo. value of game name not found!');cov_15w9yopde.s[8]++;validationResponse.message='Value of game name not found!';cov_15w9yopde.s[9]++;validationResponse.responseCode=456;cov_15w9yopde.s[10]++;return validationResponse;}else{cov_15w9yopde.b[0][1]++;}// This is what we are going to use for our info definition critera.
// There may not be two games of the same name.
cov_15w9yopde.s[11]++;try{const query=(cov_15w9yopde.s[12]++,{name:info.name});// Is info currently in DB?
cov_15w9yopde.s[13]++;log.debug('Update: crudGame.createInfo. Is info currently in DB? ');const deviceCol=(cov_15w9yopde.s[14]++,await db.findOne(query));cov_15w9yopde.s[15]++;if(!deviceCol){cov_15w9yopde.b[1][0]++;cov_15w9yopde.s[16]++;log.debug('Update: crudGame.createInfo : Info not found in DB.   Adding Info');// Insert Info into DB
cov_15w9yopde.s[17]++;await db.insertOne(info);cov_15w9yopde.s[18]++;validationResponse.message='Game info entered.';cov_15w9yopde.s[19]++;validationResponse.responseCode=200;}else{cov_15w9yopde.b[1][1]++;cov_15w9yopde.s[20]++;log.debug('Update: crudGame.createInfo : duplicate info, throwing error ');cov_15w9yopde.s[21]++;validationResponse.message='Duplicate game info entry.';cov_15w9yopde.s[22]++;validationResponse.responseCode=455;}}catch(err){cov_15w9yopde.s[23]++;log.error(`Update: crudGame.createInfo : Info insert failed : ${err}`);cov_15w9yopde.s[24]++;validationResponse.message='Info insert failed.';cov_15w9yopde.s[25]++;validationResponse.responseCode=457;}// Return Results
cov_15w9yopde.s[26]++;log.debug(`Ending: crudGame.createInfo. validationResponse : ${JSON.stringify(validationResponse)} `);cov_15w9yopde.s[27]++;return validationResponse;}// Start Update Info Function
async function updateInfo(updateInfo){cov_15w9yopde.f[1]++;cov_15w9yopde.s[28]++;log.debug(`Starting: crudGame.updateInfo. info object : ${JSON.stringify(updateInfo)} `);const validationResponse=(cov_15w9yopde.s[29]++,new Response({from:'updateInfo',responseCode:400,message:'',step:'Update Info'}));// Updates must always include game name.  Without that, there can be no update.
// Throw an error if his happens.
cov_15w9yopde.s[30]++;if(!updateInfo.name){cov_15w9yopde.b[2][0]++;cov_15w9yopde.s[31]++;log.debug('Update: crudGame.updateInfo. value of game name not found!');cov_15w9yopde.s[32]++;validationResponse.message='Value of game name not found!';cov_15w9yopde.s[33]++;validationResponse.responseCode=456;cov_15w9yopde.s[34]++;return validationResponse;}else{cov_15w9yopde.b[2][1]++;}// Take our updateValues and pull them out for later use.
const updateValues=(cov_15w9yopde.s[35]++,updateInfo.updates);// Make sure that the game exists in the DB.   If the game does not exist, we don't want
// to create a fragmented game
const query=(cov_15w9yopde.s[36]++,{name:updateInfo.name});// Is info currently in DB?
cov_15w9yopde.s[37]++;log.debug('Update: crudGame.updateInfo. Is info currently in DB? ');const deviceCol=(cov_15w9yopde.s[38]++,await db.findOne(query));cov_15w9yopde.s[39]++;if(deviceCol){cov_15w9yopde.b[3][0]++;cov_15w9yopde.s[40]++;log.debug('Update: crudGame.updateInfo : Info found in DB.   Updating Info');// Build the update object.  We are using the ID we found when we queried the DB to make
// the update faster and to allow us to update the game name
const updateOneObject=(cov_15w9yopde.s[41]++,[{updateOne:{filter:{_id:deviceCol._id},update:{$set:updateValues},upsert:true}}]);cov_15w9yopde.s[42]++;log.debug(`Update: crudGame.updateInfo : deviceCol : ${JSON.stringify(deviceCol)}`);cov_15w9yopde.s[43]++;log.debug(`Update: crudGame.updateInfo : updateOneObject : ${JSON.stringify(updateOneObject)}`);const bulkWriteResults=(cov_15w9yopde.s[44]++,await db.bulkWrite(updateOneObject));cov_15w9yopde.s[45]++;log.debug(`Running: DeviceSync.querySyncTimeStamp. bulkWriteResults ${JSON.stringify(bulkWriteResults)}`);// {"ok":1,"writeErrors":[],"writeConcernErrors":[],"insertedIds":[],"nInserted":0,"nUpserted":0,"nMatched":1,"nModified":1,"nRemoved":0,"upserted":[]}]
cov_15w9yopde.s[46]++;if(!['true',true,1].includes(bulkWriteResults.ok)){cov_15w9yopde.b[4][0]++;cov_15w9yopde.s[47]++;throw new Error(`crudGame.updateInfo : Failed mongo update ${JSON.stringify(updateOneObject)}`);}else{cov_15w9yopde.b[4][1]++;}cov_15w9yopde.s[48]++;validationResponse.message='Game Info updated!';cov_15w9yopde.s[49]++;validationResponse.responseCode=200;}else{cov_15w9yopde.b[3][1]++;cov_15w9yopde.s[50]++;log.debug('Ending: crudGame.updateInfo : Game info not found!  Unable to update.');cov_15w9yopde.s[51]++;validationResponse.message='Game info not found!  Unable to update.';cov_15w9yopde.s[52]++;validationResponse.responseCode=400;}// Return Results
cov_15w9yopde.s[53]++;return validationResponse;}// Start Delete Info Function
async function deleteInfo(deleteInfo){cov_15w9yopde.f[2]++;cov_15w9yopde.s[54]++;log.debug(`Starting: crudGame.deleteInfo. info object : ${JSON.stringify(deleteInfo)} `);const validationResponse=(cov_15w9yopde.s[55]++,new Response({from:'deleteInfo',responseCode:400,message:'',step:'Delete Info'}));// Updates must always include game name.  Without those, there can be no update.
// Throw an error if his happens.
cov_15w9yopde.s[56]++;if(!deleteInfo.name){cov_15w9yopde.b[5][0]++;cov_15w9yopde.s[57]++;log.debug('Update: crudGame.deleteInfo. value of game name not found!');cov_15w9yopde.s[58]++;validationResponse.message='Value of game name not found!';cov_15w9yopde.s[59]++;validationResponse.responseCode=456;cov_15w9yopde.s[60]++;return validationResponse;}else{cov_15w9yopde.b[5][1]++;}// Make sure that the game exists in the DB.   If the game does not exist, we don't want
// to create a fragmented game
const query=(cov_15w9yopde.s[61]++,{name:deleteInfo.name});// Is info currently in DB?
cov_15w9yopde.s[62]++;log.debug('Update: crudGame.deleteInfo. Is info currently in DB? ');const deviceCol=(cov_15w9yopde.s[63]++,await db.findOne(query));cov_15w9yopde.s[64]++;if(deviceCol){cov_15w9yopde.b[6][0]++;cov_15w9yopde.s[65]++;log.debug('Update: crudGame.deleteInfo : Info found in DB.   Updating Info');cov_15w9yopde.s[66]++;try{cov_15w9yopde.s[67]++;// Update the game info
await db.deleteOne(query);cov_15w9yopde.s[68]++;validationResponse.message='Game info deleted.';cov_15w9yopde.s[69]++;validationResponse.responseCode=200;}catch(err){cov_15w9yopde.s[70]++;log.error(`Ending: crudGame.deleteInfo : Info insert failed : ${JSON.stringify(err)}`);cov_15w9yopde.s[71]++;validationResponse.message='Info delete failed.';cov_15w9yopde.s[72]++;validationResponse.responseCode=400;}}else{cov_15w9yopde.b[6][1]++;cov_15w9yopde.s[73]++;log.debug('Ending: crudGame.deleteInfo : Game info not found!  Unable to delete.');cov_15w9yopde.s[74]++;validationResponse.message='Game info not found!  Unable to delete.';cov_15w9yopde.s[75]++;validationResponse.responseCode=400;}// Return Results
cov_15w9yopde.s[76]++;return validationResponse;}cov_15w9yopde.s[77]++;module.exports={createInfo,updateInfo,deleteInfo};