var cov_wkf62y399=function(){var path="/opt/repos/app-owbn/lib/rpc/common/crudCharacter.js";var hash="fc49bc1a058010f8369e983c548a01c8c8fda48e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/opt/repos/app-owbn/lib/rpc/common/crudCharacter.js",statementMap:{"0":{start:{line:2,column:21},end:{line:2,column:46}},"1":{start:{line:3,column:19},end:{line:3,column:38}},"2":{start:{line:4,column:11},end:{line:4,column:42}},"3":{start:{line:12,column:4},end:{line:12,column:95}},"4":{start:{line:13,column:31},end:{line:18,column:6}},"5":{start:{line:21,column:4},end:{line:21,column:101}},"6":{start:{line:25,column:4},end:{line:49,column:5}},"7":{start:{line:26,column:22},end:{line:29,column:9}},"8":{start:{line:31,column:8},end:{line:31,column:83}},"9":{start:{line:32,column:26},end:{line:32,column:49}},"10":{start:{line:34,column:8},end:{line:44,column:9}},"11":{start:{line:35,column:12},end:{line:35,column:99}},"12":{start:{line:37,column:12},end:{line:37,column:38}},"13":{start:{line:38,column:12},end:{line:38,column:68}},"14":{start:{line:39,column:12},end:{line:39,column:50}},"15":{start:{line:41,column:12},end:{line:41,column:94}},"16":{start:{line:42,column:12},end:{line:42,column:76}},"17":{start:{line:43,column:12},end:{line:43,column:50}},"18":{start:{line:46,column:8},end:{line:46,column:86}},"19":{start:{line:47,column:8},end:{line:47,column:60}},"20":{start:{line:48,column:8},end:{line:48,column:46}},"21":{start:{line:52,column:4},end:{line:52,column:30}},"22":{start:{line:56,column:4},end:{line:56,column:97}},"23":{start:{line:57,column:4},end:{line:57,column:99}},"24":{start:{line:58,column:31},end:{line:63,column:6}},"25":{start:{line:67,column:4},end:{line:73,column:5}},"26":{start:{line:68,column:8},end:{line:68,column:92}},"27":{start:{line:69,column:8},end:{line:69,column:96}},"28":{start:{line:70,column:8},end:{line:70,column:74}},"29":{start:{line:71,column:8},end:{line:71,column:46}},"30":{start:{line:72,column:8},end:{line:72,column:34}},"31":{start:{line:74,column:4},end:{line:80,column:5}},"32":{start:{line:75,column:8},end:{line:75,column:91}},"33":{start:{line:76,column:8},end:{line:76,column:93}},"34":{start:{line:77,column:8},end:{line:77,column:71}},"35":{start:{line:78,column:8},end:{line:78,column:46}},"36":{start:{line:79,column:8},end:{line:79,column:34}},"37":{start:{line:84,column:4},end:{line:119,column:5}},"38":{start:{line:85,column:22},end:{line:88,column:9}},"39":{start:{line:90,column:8},end:{line:90,column:83}},"40":{start:{line:91,column:8},end:{line:91,column:85}},"41":{start:{line:92,column:26},end:{line:92,column:49}},"42":{start:{line:94,column:8},end:{line:113,column:9}},"43":{start:{line:95,column:12},end:{line:95,column:99}},"44":{start:{line:96,column:12},end:{line:96,column:101}},"45":{start:{line:98,column:37},end:{line:102,column:13}},"46":{start:{line:105,column:12},end:{line:105,column:45}},"47":{start:{line:106,column:12},end:{line:106,column:68}},"48":{start:{line:107,column:12},end:{line:107,column:50}},"49":{start:{line:109,column:12},end:{line:109,column:107}},"50":{start:{line:110,column:12},end:{line:110,column:109}},"51":{start:{line:111,column:12},end:{line:111,column:89}},"52":{start:{line:112,column:12},end:{line:112,column:50}},"53":{start:{line:115,column:8},end:{line:115,column:86}},"54":{start:{line:116,column:8},end:{line:116,column:88}},"55":{start:{line:117,column:8},end:{line:117,column:60}},"56":{start:{line:118,column:8},end:{line:118,column:46}},"57":{start:{line:122,column:4},end:{line:122,column:30}},"58":{start:{line:125,column:0},end:{line:125,column:46}}},fnMap:{"0":{name:"createSheet",decl:{start:{line:11,column:15},end:{line:11,column:26}},loc:{start:{line:11,column:34},end:{line:53,column:1}},line:11},"1":{name:"updateSheet",decl:{start:{line:55,column:15},end:{line:55,column:26}},loc:{start:{line:55,column:36},end:{line:123,column:1}},line:55}},branchMap:{"0":{loc:{start:{line:34,column:8},end:{line:44,column:9}},type:"if",locations:[{start:{line:34,column:8},end:{line:44,column:9}},{start:{line:34,column:8},end:{line:44,column:9}}],line:34},"1":{loc:{start:{line:67,column:4},end:{line:73,column:5}},type:"if",locations:[{start:{line:67,column:4},end:{line:73,column:5}},{start:{line:67,column:4},end:{line:73,column:5}}],line:67},"2":{loc:{start:{line:74,column:4},end:{line:80,column:5}},type:"if",locations:[{start:{line:74,column:4},end:{line:80,column:5}},{start:{line:74,column:4},end:{line:80,column:5}}],line:74},"3":{loc:{start:{line:94,column:8},end:{line:113,column:9}},type:"if",locations:[{start:{line:94,column:8},end:{line:113,column:9}},{start:{line:94,column:8},end:{line:113,column:9}}],line:94}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"fc49bc1a058010f8369e983c548a01c8c8fda48e"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();/* globals log cogs database auditTrail */const{Response}=(cov_wkf62y399.s[0]++,require('../../Response'));const Collection=(cov_wkf62y399.s[1]++,'owbnVampireSheets');const db=(cov_wkf62y399.s[2]++,database.collection(Collection));/**
 * Tests to see if the devices are synced.
 * @param {object} sheet Character Sheet
 * @returns {Object} Returned object showing success or failure of action
 */async function createSheet(sheet){cov_wkf62y399.f[0]++;cov_wkf62y399.s[3]++;log.debug(`Starting: crudCharacter.createSheet. sheet object : ${JSON.stringify(sheet)} `);const validationResponse=(cov_wkf62y399.s[4]++,new Response({from:'createSheet',responseCode:400,message:'',step:'Create Sheet'}));// Does incoming sheet match template regulations?
cov_wkf62y399.s[5]++;log.debug('Update: crudCharacter.createSheet. Does incoming sheet match template regulations? ');// This is what we are going to use for our sheet definition critera.
// No player may have two characters of the same name.
cov_wkf62y399.s[6]++;try{const query=(cov_wkf62y399.s[7]++,{name:sheet.name,player:sheet.player});// Is sheet currently in DB?
cov_wkf62y399.s[8]++;log.debug('Update: crudCharacter.createSheet. Is sheet currently in DB? ');const deviceCol=(cov_wkf62y399.s[9]++,await db.findOne(query));cov_wkf62y399.s[10]++;if(!deviceCol){cov_wkf62y399.b[0][0]++;cov_wkf62y399.s[11]++;log.debug('Update: crudCharacter.createSheet : Sheet not found in DB.   Adding Sheet');// Insert Sheet into DB
cov_wkf62y399.s[12]++;await db.insertOne(sheet);cov_wkf62y399.s[13]++;validationResponse.message='Character sheet entered.';cov_wkf62y399.s[14]++;validationResponse.responseCode=200;}else{cov_wkf62y399.b[0][1]++;cov_wkf62y399.s[15]++;log.debug('Ending: crudCharacter.createSheet : duplicate sheet, throwing error ');cov_wkf62y399.s[16]++;validationResponse.message='Duplicate character sheet entry.';cov_wkf62y399.s[17]++;validationResponse.responseCode=455;}}catch(err){cov_wkf62y399.s[18]++;log.error(`Ending: crudCharacter.createSheet : Sheet insert failed : ${err}`);cov_wkf62y399.s[19]++;validationResponse.message='Sheet insert failed.';cov_wkf62y399.s[20]++;validationResponse.responseCode=457;}// Return Results
cov_wkf62y399.s[21]++;return validationResponse;}async function updateSheet(updates){cov_wkf62y399.f[1]++;cov_wkf62y399.s[22]++;log.debug(`Starting: crudCharacter.updateSheet. sheet object : ${JSON.stringify(updates)} `);cov_wkf62y399.s[23]++;console.log(`Starting: crudCharacter.updateSheet. sheet object : ${JSON.stringify(updates)} `);const validationResponse=(cov_wkf62y399.s[24]++,new Response({from:'updateSheet',responseCode:400,message:'',step:'Update Sheet'}));// Updates must always include player and character name.  Without those, there can be no update.
// Throw an error if his happens.
cov_wkf62y399.s[25]++;if(!updates.name){cov_wkf62y399.b[1][0]++;cov_wkf62y399.s[26]++;log.debug(`Update: crudCharacter.updateSheet. value of character name not found! `);cov_wkf62y399.s[27]++;console.log(`Starting: crudCharacter.updateSheet. value of character name not found! `);cov_wkf62y399.s[28]++;validationResponse.message='Value of character name not found!';cov_wkf62y399.s[29]++;validationResponse.responseCode=456;cov_wkf62y399.s[30]++;return validationResponse;}else{cov_wkf62y399.b[1][1]++;}cov_wkf62y399.s[31]++;if(!updates.player){cov_wkf62y399.b[2][0]++;cov_wkf62y399.s[32]++;log.debug(`Starting: crudCharacter.updateSheet. value of player name not found! `);cov_wkf62y399.s[33]++;console.log(`Starting: crudCharacter.updateSheet. value of player name not found! `);cov_wkf62y399.s[34]++;validationResponse.message='Value of player name not found!';cov_wkf62y399.s[35]++;validationResponse.responseCode=456;cov_wkf62y399.s[36]++;return validationResponse;}else{cov_wkf62y399.b[2][1]++;}// Make sure that the character exists in the DB.   If the character does not exist, we don't want
// to create a fragmented character
cov_wkf62y399.s[37]++;try{const query=(cov_wkf62y399.s[38]++,{name:updates.name,player:updates.player});// Is sheet currently in DB?
cov_wkf62y399.s[39]++;log.debug('Update: crudCharacter.updateSheet. Is sheet currently in DB? ');cov_wkf62y399.s[40]++;console.log('Update: crudCharacter.updateSheet. Is sheet currently in DB? ');const deviceCol=(cov_wkf62y399.s[41]++,await db.findOne(query));cov_wkf62y399.s[42]++;if(deviceCol){cov_wkf62y399.b[3][0]++;cov_wkf62y399.s[43]++;log.debug('Update: crudCharacter.updateSheet : Sheet not found in DB.   Adding Sheet');cov_wkf62y399.s[44]++;console.log('Update: crudCharacter.updateSheet : Sheet not found in DB.   Adding Sheet');// Build the update object
const updateOneObject=(cov_wkf62y399.s[45]++,{filter:{name:updates.name,player:updates.player},update:{updates},upsert:true});// Update the character sheet
cov_wkf62y399.s[46]++;await db.update(updateOneObject);cov_wkf62y399.s[47]++;validationResponse.message='Character sheet updated.';cov_wkf62y399.s[48]++;validationResponse.responseCode=200;}else{cov_wkf62y399.b[3][1]++;cov_wkf62y399.s[49]++;log.debug('Ending: crudCharacter.updateSheet : Character sheet not found!  Unable to update.');cov_wkf62y399.s[50]++;console.log('Ending: crudCharacter.updateSheet : Character sheet not found!  Unable to update.');cov_wkf62y399.s[51]++;validationResponse.message='Character sheet not found!  Unable to update.';cov_wkf62y399.s[52]++;validationResponse.responseCode=457;}}catch(err){cov_wkf62y399.s[53]++;log.error(`Ending: crudCharacter.createSheet : Sheet insert failed : ${err}`);cov_wkf62y399.s[54]++;console.log(`Ending: crudCharacter.createSheet : Sheet insert failed : ${err}`);cov_wkf62y399.s[55]++;validationResponse.message='Sheet insert failed.';cov_wkf62y399.s[56]++;validationResponse.responseCode=400;}// Return Results
cov_wkf62y399.s[57]++;return validationResponse;}cov_wkf62y399.s[58]++;module.exports={createSheet,updateSheet};