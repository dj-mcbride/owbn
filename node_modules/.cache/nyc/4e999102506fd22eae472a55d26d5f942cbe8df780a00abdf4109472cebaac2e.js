var cov_2i76z1vn09=function(){var path="/opt/repos/app-owbn/lib/rpc/character/crudCharacter.js";var hash="923e28bc0bbcda7013bea07358d5d0a8eb45ca93";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/opt/repos/app-owbn/lib/rpc/character/crudCharacter.js",statementMap:{"0":{start:{line:2,column:21},end:{line:2,column:46}},"1":{start:{line:3,column:19},end:{line:3,column:38}},"2":{start:{line:4,column:11},end:{line:4,column:42}},"3":{start:{line:5,column:12},end:{line:5,column:26}},"4":{start:{line:6,column:12},end:{line:6,column:21}},"5":{start:{line:7,column:26},end:{line:7,column:74}},"6":{start:{line:18,column:4},end:{line:18,column:68}},"7":{start:{line:19,column:4},end:{line:19,column:95}},"8":{start:{line:20,column:31},end:{line:25,column:6}},"9":{start:{line:29,column:21},end:{line:29,column:51}},"10":{start:{line:31,column:23},end:{line:31,column:38}},"11":{start:{line:33,column:4},end:{line:33,column:81}},"12":{start:{line:35,column:4},end:{line:70,column:5}},"13":{start:{line:36,column:4},end:{line:36,column:134}},"14":{start:{line:38,column:4},end:{line:38,column:71}},"15":{start:{line:40,column:4},end:{line:40,column:99}},"16":{start:{line:41,column:4},end:{line:41,column:42}},"17":{start:{line:45,column:8},end:{line:69,column:9}},"18":{start:{line:46,column:26},end:{line:49,column:13}},"19":{start:{line:51,column:12},end:{line:51,column:87}},"20":{start:{line:52,column:30},end:{line:52,column:53}},"21":{start:{line:54,column:12},end:{line:64,column:13}},"22":{start:{line:55,column:16},end:{line:55,column:103}},"23":{start:{line:57,column:16},end:{line:57,column:42}},"24":{start:{line:58,column:16},end:{line:58,column:72}},"25":{start:{line:59,column:16},end:{line:59,column:54}},"26":{start:{line:61,column:16},end:{line:61,column:98}},"27":{start:{line:62,column:16},end:{line:62,column:80}},"28":{start:{line:63,column:16},end:{line:63,column:54}},"29":{start:{line:66,column:12},end:{line:66,column:90}},"30":{start:{line:67,column:12},end:{line:67,column:64}},"31":{start:{line:68,column:12},end:{line:68,column:50}},"32":{start:{line:73,column:4},end:{line:73,column:112}},"33":{start:{line:74,column:4},end:{line:74,column:30}},"34":{start:{line:80,column:4},end:{line:80,column:101}},"35":{start:{line:82,column:31},end:{line:87,column:6}},"36":{start:{line:91,column:4},end:{line:96,column:5}},"37":{start:{line:92,column:8},end:{line:92,column:91}},"38":{start:{line:93,column:8},end:{line:93,column:74}},"39":{start:{line:94,column:8},end:{line:94,column:46}},"40":{start:{line:95,column:8},end:{line:95,column:34}},"41":{start:{line:97,column:4},end:{line:102,column:5}},"42":{start:{line:98,column:8},end:{line:98,column:88}},"43":{start:{line:99,column:8},end:{line:99,column:71}},"44":{start:{line:100,column:8},end:{line:100,column:46}},"45":{start:{line:101,column:8},end:{line:101,column:34}},"46":{start:{line:105,column:26},end:{line:105,column:45}},"47":{start:{line:109,column:22},end:{line:112,column:9}},"48":{start:{line:114,column:8},end:{line:114,column:83}},"49":{start:{line:115,column:26},end:{line:115,column:49}},"50":{start:{line:117,column:8},end:{line:145,column:9}},"51":{start:{line:118,column:12},end:{line:118,column:97}},"52":{start:{line:121,column:36},end:{line:127,column:15}},"53":{start:{line:129,column:12},end:{line:129,column:102}},"54":{start:{line:130,column:12},end:{line:130,column:114}},"55":{start:{line:132,column:37},end:{line:132,column:72}},"56":{start:{line:133,column:12},end:{line:133,column:118}},"57":{start:{line:136,column:12},end:{line:138,column:13}},"58":{start:{line:137,column:16},end:{line:137,column:118}},"59":{start:{line:139,column:12},end:{line:139,column:68}},"60":{start:{line:140,column:12},end:{line:140,column:50}},"61":{start:{line:142,column:12},end:{line:142,column:107}},"62":{start:{line:143,column:12},end:{line:143,column:89}},"63":{start:{line:144,column:12},end:{line:144,column:50}},"64":{start:{line:148,column:4},end:{line:148,column:30}},"65":{start:{line:154,column:4},end:{line:154,column:101}},"66":{start:{line:156,column:31},end:{line:161,column:6}},"67":{start:{line:165,column:4},end:{line:170,column:5}},"68":{start:{line:166,column:8},end:{line:166,column:91}},"69":{start:{line:167,column:8},end:{line:167,column:74}},"70":{start:{line:168,column:8},end:{line:168,column:46}},"71":{start:{line:169,column:8},end:{line:169,column:34}},"72":{start:{line:171,column:4},end:{line:176,column:5}},"73":{start:{line:172,column:8},end:{line:172,column:90}},"74":{start:{line:173,column:8},end:{line:173,column:71}},"75":{start:{line:174,column:8},end:{line:174,column:46}},"76":{start:{line:175,column:8},end:{line:175,column:34}},"77":{start:{line:180,column:22},end:{line:183,column:9}},"78":{start:{line:185,column:8},end:{line:185,column:83}},"79":{start:{line:186,column:26},end:{line:186,column:49}},"80":{start:{line:188,column:8},end:{line:204,column:9}},"81":{start:{line:189,column:12},end:{line:189,column:97}},"82":{start:{line:190,column:12},end:{line:199,column:13}},"83":{start:{line:192,column:16},end:{line:192,column:42}},"84":{start:{line:193,column:16},end:{line:193,column:72}},"85":{start:{line:194,column:16},end:{line:194,column:54}},"86":{start:{line:196,column:16},end:{line:196,column:110}},"87":{start:{line:197,column:16},end:{line:197,column:68}},"88":{start:{line:198,column:16},end:{line:198,column:54}},"89":{start:{line:201,column:12},end:{line:201,column:107}},"90":{start:{line:202,column:12},end:{line:202,column:89}},"91":{start:{line:203,column:12},end:{line:203,column:50}},"92":{start:{line:207,column:4},end:{line:207,column:30}},"93":{start:{line:210,column:0},end:{line:210,column:59}}},fnMap:{"0":{name:"createSheet",decl:{start:{line:17,column:15},end:{line:17,column:26}},loc:{start:{line:17,column:34},end:{line:75,column:1}},line:17},"1":{name:"updateSheet",decl:{start:{line:79,column:15},end:{line:79,column:26}},loc:{start:{line:79,column:40},end:{line:149,column:1}},line:79},"2":{name:"deleteSheet",decl:{start:{line:153,column:15},end:{line:153,column:26}},loc:{start:{line:153,column:40},end:{line:208,column:1}},line:153}},branchMap:{"0":{loc:{start:{line:35,column:4},end:{line:70,column:5}},type:"if",locations:[{start:{line:35,column:4},end:{line:70,column:5}},{start:{line:35,column:4},end:{line:70,column:5}}],line:35},"1":{loc:{start:{line:54,column:12},end:{line:64,column:13}},type:"if",locations:[{start:{line:54,column:12},end:{line:64,column:13}},{start:{line:54,column:12},end:{line:64,column:13}}],line:54},"2":{loc:{start:{line:91,column:4},end:{line:96,column:5}},type:"if",locations:[{start:{line:91,column:4},end:{line:96,column:5}},{start:{line:91,column:4},end:{line:96,column:5}}],line:91},"3":{loc:{start:{line:97,column:4},end:{line:102,column:5}},type:"if",locations:[{start:{line:97,column:4},end:{line:102,column:5}},{start:{line:97,column:4},end:{line:102,column:5}}],line:97},"4":{loc:{start:{line:117,column:8},end:{line:145,column:9}},type:"if",locations:[{start:{line:117,column:8},end:{line:145,column:9}},{start:{line:117,column:8},end:{line:145,column:9}}],line:117},"5":{loc:{start:{line:136,column:12},end:{line:138,column:13}},type:"if",locations:[{start:{line:136,column:12},end:{line:138,column:13}},{start:{line:136,column:12},end:{line:138,column:13}}],line:136},"6":{loc:{start:{line:165,column:4},end:{line:170,column:5}},type:"if",locations:[{start:{line:165,column:4},end:{line:170,column:5}},{start:{line:165,column:4},end:{line:170,column:5}}],line:165},"7":{loc:{start:{line:171,column:4},end:{line:176,column:5}},type:"if",locations:[{start:{line:171,column:4},end:{line:176,column:5}},{start:{line:171,column:4},end:{line:176,column:5}}],line:171},"8":{loc:{start:{line:188,column:8},end:{line:204,column:9}},type:"if",locations:[{start:{line:188,column:8},end:{line:204,column:9}},{start:{line:188,column:8},end:{line:204,column:9}}],line:188}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"923e28bc0bbcda7013bea07358d5d0a8eb45ca93"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();/* globals log database */const{Response}=(cov_2i76z1vn09.s[0]++,require('../../Response'));const Collection=(cov_2i76z1vn09.s[1]++,'owbnVampireSheets');const db=(cov_2i76z1vn09.s[2]++,database.collection(Collection));const Ajv=(cov_2i76z1vn09.s[3]++,require('ajv'));const ajv=(cov_2i76z1vn09.s[4]++,new Ajv());const vampSheetTemplate=(cov_2i76z1vn09.s[5]++,require('../../schemas/owbnVamp/vampSheet.json'));/**
 * Tests to see if the devices are synced.
 * @param {object} sheet Character Sheet
 * @returns {Object} Returned object showing success or failure of action
 */ //Start Create Sheet Function
async function createSheet(sheet){cov_2i76z1vn09.f[0]++;cov_2i76z1vn09.s[6]++;log.debug('Starting: crudCharacter.createSheet. sheet object ');cov_2i76z1vn09.s[7]++;log.debug(`Starting: crudCharacter.createSheet. sheet object : ${JSON.stringify(sheet)} `);const validationResponse=(cov_2i76z1vn09.s[8]++,new Response({from:'createSheet',responseCode:400,message:'',step:'Create Sheet'}));// A schema was passed.   We want to validate it
// Apply the schema
const validate=(cov_2i76z1vn09.s[9]++,ajv.compile(vampSheetTemplate));// Compare the value and see if it's valid
const validSheet=(cov_2i76z1vn09.s[10]++,validate(sheet));cov_2i76z1vn09.s[11]++;log.debug(`Update: crudCharacter.createSheet. validSchema : ${validSheet} `);// Was the value valid?  If the validSheet value is false, then we know that we need to throw back an error
cov_2i76z1vn09.s[12]++;if(!validSheet){cov_2i76z1vn09.b[0][0]++;cov_2i76z1vn09.s[13]++;log.debug(`Update: slipedManager.buildSlipedObject : Sliped Manager Schema provided is not valid. : ${JSON.stringify(validate)}`);// Throw an error
cov_2i76z1vn09.s[14]++;log.debug('Update: crudCharacter.createSheet : validation error ');// validationResponse.message = `Errors found : ${JSON.stringify(validate.errors)}`;
cov_2i76z1vn09.s[15]++;validationResponse.message=`Unable to process missing value : ${validate.errors[0].message}`;cov_2i76z1vn09.s[16]++;validationResponse.responseCode=455;}else{cov_2i76z1vn09.b[0][1]++;cov_2i76z1vn09.s[17]++;// This is what we are going to use for our sheet definition critera.
// No player may have two characters of the same name.
try{const query=(cov_2i76z1vn09.s[18]++,{name:sheet.name,player:sheet.player});// Is sheet currently in DB?
cov_2i76z1vn09.s[19]++;log.debug('Update: crudCharacter.createSheet. Is sheet currently in DB? ');const deviceCol=(cov_2i76z1vn09.s[20]++,await db.findOne(query));cov_2i76z1vn09.s[21]++;if(!deviceCol){cov_2i76z1vn09.b[1][0]++;cov_2i76z1vn09.s[22]++;log.debug('Update: crudCharacter.createSheet : Sheet not found in DB.   Adding Sheet');// Insert Sheet into DB
cov_2i76z1vn09.s[23]++;await db.insertOne(sheet);cov_2i76z1vn09.s[24]++;validationResponse.message='Character sheet entered.';cov_2i76z1vn09.s[25]++;validationResponse.responseCode=200;}else{cov_2i76z1vn09.b[1][1]++;cov_2i76z1vn09.s[26]++;log.debug('Update: crudCharacter.createSheet : duplicate sheet, throwing error ');cov_2i76z1vn09.s[27]++;validationResponse.message='Duplicate character sheet entry.';cov_2i76z1vn09.s[28]++;validationResponse.responseCode=455;}}catch(err){cov_2i76z1vn09.s[29]++;log.error(`Update: crudCharacter.createSheet : Sheet insert failed : ${err}`);cov_2i76z1vn09.s[30]++;validationResponse.message='Sheet insert failed.';cov_2i76z1vn09.s[31]++;validationResponse.responseCode=457;}}// Return Results
cov_2i76z1vn09.s[32]++;log.debug(`Ending: crudCharacter.createSheet. validationResponse : ${JSON.stringify(validationResponse)} `);cov_2i76z1vn09.s[33]++;return validationResponse;}//Start Update Sheet Function
async function updateSheet(updateSheet){cov_2i76z1vn09.f[1]++;cov_2i76z1vn09.s[34]++;log.debug(`Starting: crudCharacter.updateSheet. sheet object : ${JSON.stringify(updateSheet)} `);const validationResponse=(cov_2i76z1vn09.s[35]++,new Response({from:'updateSheet',responseCode:400,message:'',step:'Update Sheet'}));// Updates must always include player and character name.  Without those, there can be no update.
// Throw an error if his happens.
cov_2i76z1vn09.s[36]++;if(!updateSheet.name){cov_2i76z1vn09.b[2][0]++;cov_2i76z1vn09.s[37]++;log.debug('Update: crudCharacter.updateSheet. value of character name not found!');cov_2i76z1vn09.s[38]++;validationResponse.message='Value of character name not found!';cov_2i76z1vn09.s[39]++;validationResponse.responseCode=456;cov_2i76z1vn09.s[40]++;return validationResponse;}else{cov_2i76z1vn09.b[2][1]++;}cov_2i76z1vn09.s[41]++;if(!updateSheet.player){cov_2i76z1vn09.b[3][0]++;cov_2i76z1vn09.s[42]++;log.debug('Update: crudCharacter.updateSheet. value of player name not found!');cov_2i76z1vn09.s[43]++;validationResponse.message='Value of player name not found!';cov_2i76z1vn09.s[44]++;validationResponse.responseCode=456;cov_2i76z1vn09.s[45]++;return validationResponse;}else{cov_2i76z1vn09.b[3][1]++;}// Take our updateValues and pull them out for later use.
const updateValues=(cov_2i76z1vn09.s[46]++,updateSheet.updates);// Make sure that the character exists in the DB.   If the character does not exist, we don't want
// to create a fragmented character
const query=(cov_2i76z1vn09.s[47]++,{name:updateSheet.name,player:updateSheet.player});// Is sheet currently in DB?
cov_2i76z1vn09.s[48]++;log.debug('Update: crudCharacter.updateSheet. Is sheet currently in DB? ');const deviceCol=(cov_2i76z1vn09.s[49]++,await db.findOne(query));cov_2i76z1vn09.s[50]++;if(deviceCol){cov_2i76z1vn09.b[4][0]++;cov_2i76z1vn09.s[51]++;log.debug('Update: crudCharacter.updateSheet : Sheet found in DB.   Updating Sheet');// Build the update object.  We are using the ID we found when we queried the DB to make
// the update faster and to allow us to update the character/player name
const updateOneObject=(cov_2i76z1vn09.s[52]++,[{updateOne:{filter:{_id:deviceCol._id},update:{$set:updateValues},upsert:true}}]);cov_2i76z1vn09.s[53]++;log.debug(`Update: crudCharacter.updateSheet : deviceCol : ${JSON.stringify(deviceCol)}`);cov_2i76z1vn09.s[54]++;log.debug(`Update: crudCharacter.updateSheet : updateOneObject : ${JSON.stringify(updateOneObject)}`);const bulkWriteResults=(cov_2i76z1vn09.s[55]++,await db.bulkWrite(updateOneObject));cov_2i76z1vn09.s[56]++;log.debug(`Running: DeviceSync.querySyncTimeStamp. bulkWriteResults ${JSON.stringify(bulkWriteResults)}`);// {"ok":1,"writeErrors":[],"writeConcernErrors":[],"insertedIds":[],"nInserted":0,"nUpserted":0,"nMatched":1,"nModified":1,"nRemoved":0,"upserted":[]}]
cov_2i76z1vn09.s[57]++;if(!['true',true,1].includes(bulkWriteResults.ok)){cov_2i76z1vn09.b[5][0]++;cov_2i76z1vn09.s[58]++;throw new Error(`crudCharacter.updateSheet : Failed mongo update ${JSON.stringify(updateOneObject)}`);}else{cov_2i76z1vn09.b[5][1]++;}cov_2i76z1vn09.s[59]++;validationResponse.message='Character Sheet updated!';cov_2i76z1vn09.s[60]++;validationResponse.responseCode=200;}else{cov_2i76z1vn09.b[4][1]++;cov_2i76z1vn09.s[61]++;log.debug('Ending: crudCharacter.updateSheet : Character sheet not found!  Unable to update.');cov_2i76z1vn09.s[62]++;validationResponse.message='Character sheet not found!  Unable to update.';cov_2i76z1vn09.s[63]++;validationResponse.responseCode=400;}// Return Results
cov_2i76z1vn09.s[64]++;return validationResponse;}//Start Delete Sheet Function
async function deleteSheet(deleteSheet){cov_2i76z1vn09.f[2]++;cov_2i76z1vn09.s[65]++;log.debug(`Starting: crudCharacter.deleteSheet. sheet object : ${JSON.stringify(deleteSheet)} `);const validationResponse=(cov_2i76z1vn09.s[66]++,new Response({from:'deleteSheet',responseCode:400,message:'',step:'Delete Sheet'}));// Updates must always include player and character name.  Without those, there can be no update.
// Throw an error if his happens.
cov_2i76z1vn09.s[67]++;if(!deleteSheet.name){cov_2i76z1vn09.b[6][0]++;cov_2i76z1vn09.s[68]++;log.debug('Update: crudCharacter.deleteSheet. value of character name not found!');cov_2i76z1vn09.s[69]++;validationResponse.message='Value of character name not found!';cov_2i76z1vn09.s[70]++;validationResponse.responseCode=456;cov_2i76z1vn09.s[71]++;return validationResponse;}else{cov_2i76z1vn09.b[6][1]++;}cov_2i76z1vn09.s[72]++;if(!deleteSheet.player){cov_2i76z1vn09.b[7][0]++;cov_2i76z1vn09.s[73]++;log.debug('Starting: crudCharacter.deleteSheet. value of player name not found!');cov_2i76z1vn09.s[74]++;validationResponse.message='Value of player name not found!';cov_2i76z1vn09.s[75]++;validationResponse.responseCode=456;cov_2i76z1vn09.s[76]++;return validationResponse;}else{cov_2i76z1vn09.b[7][1]++;}// Make sure that the character exists in the DB.   If the character does not exist, we don't want
// to create a fragmented character
const query=(cov_2i76z1vn09.s[77]++,{name:deleteSheet.name,player:deleteSheet.player});// Is sheet currently in DB?
cov_2i76z1vn09.s[78]++;log.debug('Update: crudCharacter.deleteSheet. Is sheet currently in DB? ');const deviceCol=(cov_2i76z1vn09.s[79]++,await db.findOne(query));cov_2i76z1vn09.s[80]++;if(deviceCol){cov_2i76z1vn09.b[8][0]++;cov_2i76z1vn09.s[81]++;log.debug('Update: crudCharacter.deleteSheet : Sheet found in DB.   Updating Sheet');cov_2i76z1vn09.s[82]++;try{cov_2i76z1vn09.s[83]++;// Update the character sheet
await db.deleteOne(query);cov_2i76z1vn09.s[84]++;validationResponse.message='Character sheet deleted.';cov_2i76z1vn09.s[85]++;validationResponse.responseCode=200;}catch(err){cov_2i76z1vn09.s[86]++;log.error(`Ending: crudCharacter.deleteSheet : Sheet insert failed : ${JSON.stringify(err)}`);cov_2i76z1vn09.s[87]++;validationResponse.message='Sheet delete failed.';cov_2i76z1vn09.s[88]++;validationResponse.responseCode=400;}}else{cov_2i76z1vn09.b[8][1]++;cov_2i76z1vn09.s[89]++;log.debug('Ending: crudCharacter.deleteSheet : Character sheet not found!  Unable to delete.');cov_2i76z1vn09.s[90]++;validationResponse.message='Character sheet not found!  Unable to delete.';cov_2i76z1vn09.s[91]++;validationResponse.responseCode=400;}// Return Results
cov_2i76z1vn09.s[92]++;return validationResponse;}cov_2i76z1vn09.s[93]++;module.exports={createSheet,updateSheet,deleteSheet};