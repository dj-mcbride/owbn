var cov_snidblzf6=function(){var path="/opt/repos/app-owbn/lib/Response.js";var hash="85640cd097b8dba1aee182ab00772e41ff59a446";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/opt/repos/app-owbn/lib/Response.js",statementMap:{"0":{start:{line:3,column:32},end:{line:3,column:52}},"1":{start:{line:6,column:20},end:{line:6,column:41}},"2":{start:{line:13,column:16},end:{line:19,column:32}},"3":{start:{line:16,column:6},end:{line:19,column:31}},"4":{start:{line:26,column:19},end:{line:26,column:64}},"5":{start:{line:26,column:31},end:{line:26,column:64}},"6":{start:{line:29,column:23},end:{line:50,column:1}},"7":{start:{line:52,column:19},end:{line:52,column:90}},"8":{start:{line:52,column:56},end:{line:52,column:85}},"9":{start:{line:54,column:0},end:{line:63,column:2}},"10":{start:{line:55,column:4},end:{line:62,column:5}},"11":{start:{line:55,column:38},end:{line:55,column:73}},"12":{start:{line:56,column:8},end:{line:61,column:11}},"13":{start:{line:81,column:8},end:{line:88,column:9}},"14":{start:{line:82,column:12},end:{line:87,column:15}},"15":{start:{line:90,column:8},end:{line:90,column:42}},"16":{start:{line:90,column:30},end:{line:90,column:42}},"17":{start:{line:94,column:67},end:{line:96,column:61}},"18":{start:{line:98,column:8},end:{line:98,column:25}},"19":{start:{line:100,column:21},end:{line:100,column:25}},"20":{start:{line:101,column:8},end:{line:101,column:67}},"21":{start:{line:101,column:57},end:{line:101,column:63}},"22":{start:{line:103,column:29},end:{line:103,column:47}},"23":{start:{line:104,column:8},end:{line:112,column:11}},"24":{start:{line:105,column:23},end:{line:105,column:37}},"25":{start:{line:107,column:16},end:{line:107,column:49}},"26":{start:{line:108,column:16},end:{line:108,column:41}},"27":{start:{line:109,column:16},end:{line:109,column:91}},"28":{start:{line:109,column:54},end:{line:109,column:84}},"29":{start:{line:113,column:8},end:{line:113,column:47}},"30":{start:{line:115,column:8},end:{line:115,column:37}},"31":{start:{line:116,column:8},end:{line:116,column:41}},"32":{start:{line:119,column:8},end:{line:119,column:41}},"33":{start:{line:120,column:8},end:{line:120,column:36}},"34":{start:{line:122,column:8},end:{line:122,column:33}},"35":{start:{line:126,column:8},end:{line:153,column:9}},"36":{start:{line:127,column:27},end:{line:132,column:14}},"37":{start:{line:133,column:12},end:{line:149,column:15}},"38":{start:{line:134,column:16},end:{line:146,column:17}},"39":{start:{line:135,column:20},end:{line:135,column:63}},"40":{start:{line:136,column:23},end:{line:146,column:17}},"41":{start:{line:137,column:20},end:{line:137,column:64}},"42":{start:{line:138,column:20},end:{line:138,column:63}},"43":{start:{line:140,column:20},end:{line:145,column:23}},"44":{start:{line:147,column:16},end:{line:147,column:75}},"45":{start:{line:148,column:16},end:{line:148,column:44}},"46":{start:{line:150,column:12},end:{line:150,column:26}},"47":{start:{line:152,column:12},end:{line:152,column:75}},"48":{start:{line:165,column:8},end:{line:170,column:9}},"49":{start:{line:166,column:12},end:{line:168,column:13}},"50":{start:{line:167,column:16},end:{line:167,column:44}},"51":{start:{line:169,column:12},end:{line:169,column:34}},"52":{start:{line:173,column:8},end:{line:175,column:9}},"53":{start:{line:174,column:12},end:{line:174,column:23}},"54":{start:{line:176,column:8},end:{line:176,column:20}},"55":{start:{line:180,column:0},end:{line:182,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:13,column:16},end:{line:13,column:17}},loc:{start:{line:16,column:6},end:{line:19,column:31}},line:16},"1":{name:"(anonymous_1)",decl:{start:{line:26,column:19},end:{line:26,column:20}},loc:{start:{line:26,column:31},end:{line:26,column:64}},line:26},"2":{name:"(anonymous_2)",decl:{start:{line:52,column:41},end:{line:52,column:42}},loc:{start:{line:52,column:56},end:{line:52,column:85}},line:52},"3":{name:"(anonymous_3)",decl:{start:{line:54,column:26},end:{line:54,column:27}},loc:{start:{line:54,column:44},end:{line:63,column:1}},line:54},"4":{name:"(anonymous_4)",decl:{start:{line:55,column:29},end:{line:55,column:30}},loc:{start:{line:55,column:38},end:{line:55,column:73}},line:55},"5":{name:"(anonymous_5)",decl:{start:{line:75,column:4},end:{line:75,column:5}},loc:{start:{line:80,column:12},end:{line:123,column:5}},line:80},"6":{name:"(anonymous_6)",decl:{start:{line:101,column:51},end:{line:101,column:52}},loc:{start:{line:101,column:57},end:{line:101,column:63}},line:101},"7":{name:"(anonymous_7)",decl:{start:{line:105,column:17},end:{line:105,column:18}},loc:{start:{line:105,column:23},end:{line:105,column:37}},line:105},"8":{name:"(anonymous_8)",decl:{start:{line:106,column:17},end:{line:106,column:18}},loc:{start:{line:106,column:30},end:{line:110,column:13}},line:106},"9":{name:"(anonymous_9)",decl:{start:{line:109,column:45},end:{line:109,column:46}},loc:{start:{line:109,column:54},end:{line:109,column:84}},line:109},"10":{name:"(anonymous_10)",decl:{start:{line:125,column:4},end:{line:125,column:5}},loc:{start:{line:125,column:42},end:{line:154,column:5}},line:125},"11":{name:"(anonymous_11)",decl:{start:{line:133,column:33},end:{line:133,column:34}},loc:{start:{line:133,column:47},end:{line:149,column:13}},line:133},"12":{name:"(anonymous_12)",decl:{start:{line:163,column:4},end:{line:163,column:5}},loc:{start:{line:163,column:29},end:{line:177,column:5}},line:163}},branchMap:{"0":{loc:{start:{line:16,column:6},end:{line:19,column:31}},type:"binary-expr",locations:[{start:{line:16,column:6},end:{line:16,column:28}},{start:{line:17,column:9},end:{line:17,column:34}},{start:{line:18,column:12},end:{line:18,column:30}},{start:{line:19,column:12},end:{line:19,column:30}}],line:16},"1":{loc:{start:{line:26,column:31},end:{line:26,column:64}},type:"binary-expr",locations:[{start:{line:26,column:31},end:{line:26,column:39}},{start:{line:26,column:43},end:{line:26,column:64}}],line:26},"2":{loc:{start:{line:55,column:4},end:{line:62,column:5}},type:"if",locations:[{start:{line:55,column:4},end:{line:62,column:5}},{start:{line:55,column:4},end:{line:62,column:5}}],line:55},"3":{loc:{start:{line:75,column:16},end:{line:80,column:10}},type:"default-arg",locations:[{start:{line:80,column:8},end:{line:80,column:10}}],line:75},"4":{loc:{start:{line:78,column:8},end:{line:78,column:102}},type:"default-arg",locations:[{start:{line:78,column:18},end:{line:78,column:102}}],line:78},"5":{loc:{start:{line:79,column:8},end:{line:79,column:28}},type:"default-arg",locations:[{start:{line:79,column:15},end:{line:79,column:28}}],line:79},"6":{loc:{start:{line:81,column:8},end:{line:88,column:9}},type:"if",locations:[{start:{line:81,column:8},end:{line:88,column:9}},{start:{line:81,column:8},end:{line:88,column:9}}],line:81},"7":{loc:{start:{line:90,column:8},end:{line:90,column:42}},type:"if",locations:[{start:{line:90,column:8},end:{line:90,column:42}},{start:{line:90,column:8},end:{line:90,column:42}}],line:90},"8":{loc:{start:{line:94,column:67},end:{line:96,column:61}},type:"cond-expr",locations:[{start:{line:95,column:14},end:{line:95,column:72}},{start:{line:96,column:14},end:{line:96,column:61}}],line:94},"9":{loc:{start:{line:134,column:16},end:{line:146,column:17}},type:"if",locations:[{start:{line:134,column:16},end:{line:146,column:17}},{start:{line:134,column:16},end:{line:146,column:17}}],line:134},"10":{loc:{start:{line:136,column:23},end:{line:146,column:17}},type:"if",locations:[{start:{line:136,column:23},end:{line:146,column:17}},{start:{line:136,column:23},end:{line:146,column:17}}],line:136},"11":{loc:{start:{line:165,column:8},end:{line:170,column:9}},type:"if",locations:[{start:{line:165,column:8},end:{line:170,column:9}},{start:{line:165,column:8},end:{line:170,column:9}}],line:165},"12":{loc:{start:{line:166,column:12},end:{line:168,column:13}},type:"if",locations:[{start:{line:166,column:12},end:{line:168,column:13}},{start:{line:166,column:12},end:{line:168,column:13}}],line:166},"13":{loc:{start:{line:173,column:8},end:{line:175,column:9}},type:"if",locations:[{start:{line:173,column:8},end:{line:175,column:9}},{start:{line:173,column:8},end:{line:175,column:9}}],line:173}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},b:{"0":[0,0,0,0],"1":[0,0],"2":[0,0],"3":[0],"4":[0],"5":[0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"85640cd097b8dba1aee182ab00772e41ff59a446"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();/* global auditTrail */const{exists,firstExists}=(cov_snidblzf6.s[0]++,require('./helpers'));// Unique key for making response objects easily identifiable
const IS_RESPONSE=(cov_snidblzf6.s[1]++,Symbol('IS_RESPONSE'));/**
 * @summary Check an object to make sure it is an error object
 * @param {Object} error object to be analyzed
 * @returns {boolean} indication of if it is an error
 */cov_snidblzf6.s[2]++;const isError=error=>{cov_snidblzf6.f[0]++;cov_snidblzf6.s[3]++;return(// An object is an error if it is an instance of Error OR it is an object with properties stack and message.
// Allowing a non-Error instance object to be an error makes responses stored in MongoDB return true from this method
(cov_snidblzf6.b[0][0]++,error instanceof Error)||(cov_snidblzf6.b[0][1]++,typeof error==='object')&&(cov_snidblzf6.b[0][2]++,'stack'in error)&&(cov_snidblzf6.b[0][3]++,'message'in error));};/**
 * @summary Check an object to make sure it is a response object
 * @param {Object} response object to be analyzed
 * @returns {boolean} indication of if it is an response
 */cov_snidblzf6.s[4]++;const isResponse=response=>{cov_snidblzf6.f[1]++;cov_snidblzf6.s[5]++;return(cov_snidblzf6.b[1][0]++,response)&&(cov_snidblzf6.b[1][1]++,response[IS_RESPONSE]);};// Store of current error codes.
const RESPONSE_CODES=(cov_snidblzf6.s[6]++,[{code:'WarningFailure',responseCode:199},{code:'Success',responseCode:200},{code:'GenericError',responseCode:400},{code:'InvalidInput',responseCode:455},{code:'FailedEvaluation',responseCode:456},{code:'BadDBResponse',responseCode:457},{code:'InternalServerError',responseCode:500}]);const CODES_LIST=(cov_snidblzf6.s[7]++,RESPONSE_CODES.reduce((arr,next)=>{cov_snidblzf6.f[2]++;cov_snidblzf6.s[8]++;return arr.concat(next.responseCode);},[]));cov_snidblzf6.s[9]++;RESPONSE_CODES.validate=responseCode=>{cov_snidblzf6.f[3]++;cov_snidblzf6.s[10]++;if(!RESPONSE_CODES.find(entry=>{cov_snidblzf6.f[4]++;cov_snidblzf6.s[11]++;return entry.responseCode===responseCode;})){cov_snidblzf6.b[2][0]++;cov_snidblzf6.s[12]++;throw new Response({from:responseCode,responseCode:500,message:`RESPONSE_CODE.validate : Response code must be one of ${JSON.stringify(CODES_LIST)}`,step:'Validate Response Code'});}else{cov_snidblzf6.b[2][1]++;}};class Response{/**
     * @summary Generates at Response Object
     * @description Generates a user-friendly snapshot of a request's results; enabling users to derive success, error or failure.
     * @param {Number} responseCode Http Response Code (see: *RESPONSE_CODES* line 29  for complete list)
     * @param {String} message User friendly message to explain results
     * @param {Object} from results or error object you wish to document
     * @param {String} step current step a user is on
     */constructor({from,responseCode,message=(cov_snidblzf6.b[4][0]++,'Generic Error. Please report so this error can be changed to something more valid.'),step=(cov_snidblzf6.b[5][0]++,'UnknownStep')}=(cov_snidblzf6.b[3][0]++,{})){cov_snidblzf6.f[5]++;cov_snidblzf6.s[13]++;if(!exists(from)){cov_snidblzf6.b[6][0]++;cov_snidblzf6.s[14]++;throw new Response({from:{},responseCode:500,message:'Response.constructor : Provide an value for new Response({ from, ... })',step:'Create Response'});}else{cov_snidblzf6.b[6][1]++;}cov_snidblzf6.s[15]++;if(isResponse(from)){cov_snidblzf6.b[7][0]++;cov_snidblzf6.s[16]++;return from;}else{cov_snidblzf6.b[7][1]++;}// Error non responses look for an optional fallback response code, but do not use a fallback message
// non error, non responses need a fallback response code and look for an optional fallback message
const[usableResponseCode,usableMessage,usableResults]=(cov_snidblzf6.s[17]++,isError(from)?(cov_snidblzf6.b[8][0]++,[firstExists(responseCode,500),from.message,from.stack]):(cov_snidblzf6.b[8][1]++,[firstExists(responseCode,200),message,from]));cov_snidblzf6.s[18]++;this.step=step;let p_code=(cov_snidblzf6.s[19]++,null);cov_snidblzf6.s[20]++;Object.defineProperty(this,'code',{get:()=>{cov_snidblzf6.f[6]++;cov_snidblzf6.s[21]++;return p_code;}});let p_responseCode=(cov_snidblzf6.s[22]++,usableResponseCode);cov_snidblzf6.s[23]++;Object.defineProperty(this,'responseCode',{get:()=>{cov_snidblzf6.f[7]++;cov_snidblzf6.s[24]++;return p_responseCode;},set:newCode=>{cov_snidblzf6.f[8]++;cov_snidblzf6.s[25]++;RESPONSE_CODES.validate(newCode);cov_snidblzf6.s[26]++;p_responseCode=newCode;cov_snidblzf6.s[27]++;p_code=RESPONSE_CODES.find(entry=>{cov_snidblzf6.f[9]++;cov_snidblzf6.s[28]++;return entry.responseCode===newCode;}).code;},enumerable:true});cov_snidblzf6.s[29]++;this.responseCode=usableResponseCode;cov_snidblzf6.s[30]++;this.results=usableResults;cov_snidblzf6.s[31]++;this.userMessage=usableMessage;// Generate meta data related to caller and the current time
cov_snidblzf6.s[32]++;this.user=auditTrail.getUser();cov_snidblzf6.s[33]++;this.timestamp=Date.now();cov_snidblzf6.s[34]++;this[IS_RESPONSE]=true;}static combineResponses(mopResponses){cov_snidblzf6.f[10]++;cov_snidblzf6.s[35]++;try{const result=(cov_snidblzf6.s[36]++,new Response({from:[],responseCode:200,message:'',step:''}));cov_snidblzf6.s[37]++;mopResponses.forEach(response=>{cov_snidblzf6.f[11]++;cov_snidblzf6.s[38]++;if(response.responseCode===200){cov_snidblzf6.b[9][0]++;cov_snidblzf6.s[39]++;result.userMessage+=response.userMessage;}else{cov_snidblzf6.b[9][1]++;cov_snidblzf6.s[40]++;if(exists(response.responseCode)){cov_snidblzf6.b[10][0]++;cov_snidblzf6.s[41]++;result.responseCode=response.responseCode;cov_snidblzf6.s[42]++;result.userMessage+=response.userMessage;}else{cov_snidblzf6.b[10][1]++;cov_snidblzf6.s[43]++;throw new Response({from:response,responseCode:500,message:'Got result with no response code in Response.combineResponses',step:'Combine Responses'});}}cov_snidblzf6.s[44]++;result.results=result.results.concat([response.results]);cov_snidblzf6.s[45]++;result.step=response.step;});cov_snidblzf6.s[46]++;return result;}catch(error){cov_snidblzf6.s[47]++;throw new Response({from:error,step:'Combine Responses'});}}/**
     * Throw or callback with error for responseCode in codes.
     * Return or callback with results for responseCode not in codes
     * @param {Array.<Number>} codes Codes to error on
     * @param {Function} [callback] Optional callback
     * @return {any} Current response or callback result
     */errorOn(codes,callback){cov_snidblzf6.f[12]++;cov_snidblzf6.s[48]++;// Callback with results or error when callback given
if(callback){cov_snidblzf6.b[11][0]++;cov_snidblzf6.s[49]++;if(codes.includes(this.responseCode)){cov_snidblzf6.b[12][0]++;cov_snidblzf6.s[50]++;return callback(null,this);}else{cov_snidblzf6.b[12][1]++;}cov_snidblzf6.s[51]++;return callback(this);}else{cov_snidblzf6.b[11][1]++;}// Throw or return when no callback given
cov_snidblzf6.s[52]++;if(codes.includes(this.responseCode)){cov_snidblzf6.b[13][0]++;cov_snidblzf6.s[53]++;throw this;}else{cov_snidblzf6.b[13][1]++;}cov_snidblzf6.s[54]++;return this;}}cov_snidblzf6.s[55]++;module.exports={Response};