var cov_zrjjpwq99=function(){var path="/opt/repos/app-owbn/lib/helpers.js";var hash="e25a352cd82475bf87f5cc72fc71114bacc5b813";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/opt/repos/app-owbn/lib/helpers.js",statementMap:{"0":{start:{line:2,column:15},end:{line:2,column:41}},"1":{start:{line:2,column:22},end:{line:2,column:41}},"2":{start:{line:12,column:13},end:{line:22,column:5}},"3":{start:{line:12,column:29},end:{line:22,column:5}},"4":{start:{line:14,column:12},end:{line:18,column:13}},"5":{start:{line:16,column:16},end:{line:16,column:82}},"6":{start:{line:16,column:52},end:{line:16,column:82}},"7":{start:{line:17,column:16},end:{line:17,column:46}},"8":{start:{line:19,column:12},end:{line:19,column:29}},"9":{start:{line:31,column:14},end:{line:43,column:1}},"10":{start:{line:32,column:18},end:{line:32,column:21}},"11":{start:{line:33,column:28},end:{line:33,column:46}},"12":{start:{line:34,column:4},end:{line:39,column:5}},"13":{start:{line:35,column:8},end:{line:37,column:9}},"14":{start:{line:36,column:12},end:{line:36,column:63}},"15":{start:{line:38,column:8},end:{line:38,column:32}},"16":{start:{line:41,column:4},end:{line:42,column:40}},"17":{start:{line:41,column:25},end:{line:41,column:55}},"18":{start:{line:42,column:9},end:{line:42,column:40}},"19":{start:{line:46,column:16},end:{line:46,column:60}},"20":{start:{line:46,column:27},end:{line:46,column:60}},"21":{start:{line:50,column:4},end:{line:58,column:9}},"22":{start:{line:50,column:21},end:{line:58,column:9}},"23":{start:{line:53,column:34},end:{line:56,column:13}},"24":{start:{line:68,column:23},end:{line:79,column:1}},"25":{start:{line:69,column:22},end:{line:69,column:24}},"26":{start:{line:70,column:4},end:{line:77,column:7}},"27":{start:{line:71,column:8},end:{line:76,column:9}},"28":{start:{line:72,column:33},end:{line:72,column:57}},"29":{start:{line:73,column:12},end:{line:73,column:85}},"30":{start:{line:75,column:12},end:{line:75,column:38}},"31":{start:{line:78,column:4},end:{line:78,column:21}},"32":{start:{line:103,column:13},end:{line:110,column:1}},"33":{start:{line:104,column:20},end:{line:104,column:48}},"34":{start:{line:105,column:19},end:{line:105,column:33}},"35":{start:{line:106,column:4},end:{line:108,column:6}},"36":{start:{line:107,column:16},end:{line:107,column:61}},"37":{start:{line:109,column:4},end:{line:109,column:18}},"38":{start:{line:112,column:15},end:{line:112,column:73}},"39":{start:{line:112,column:22},end:{line:112,column:73}},"40":{start:{line:113,column:16},end:{line:113,column:40}},"41":{start:{line:113,column:23},end:{line:113,column:40}},"42":{start:{line:115,column:20},end:{line:115,column:50}},"43":{start:{line:115,column:33},end:{line:115,column:50}},"44":{start:{line:119,column:23},end:{line:119,column:104}},"45":{start:{line:119,column:46},end:{line:119,column:104}},"46":{start:{line:126,column:18},end:{line:138,column:1}},"47":{start:{line:127,column:19},end:{line:127,column:47}},"48":{start:{line:129,column:4},end:{line:135,column:5}},"49":{start:{line:130,column:8},end:{line:134,column:9}},"50":{start:{line:131,column:12},end:{line:131,column:46}},"51":{start:{line:133,column:12},end:{line:133,column:35}},"52":{start:{line:137,column:4},end:{line:137,column:18}},"53":{start:{line:140,column:19},end:{line:140,column:50}},"54":{start:{line:140,column:26},end:{line:140,column:50}},"55":{start:{line:142,column:16},end:{line:142,column:74}},"56":{start:{line:142,column:25},end:{line:142,column:74}},"57":{start:{line:142,column:53},end:{line:142,column:69}},"58":{start:{line:144,column:17},end:{line:144,column:60}},"59":{start:{line:144,column:27},end:{line:144,column:60}},"60":{start:{line:144,column:43},end:{line:144,column:59}},"61":{start:{line:146,column:0},end:{line:162,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:2,column:15},end:{line:2,column:16}},loc:{start:{line:2,column:22},end:{line:2,column:41}},line:2},"1":{name:"(anonymous_1)",decl:{start:{line:12,column:13},end:{line:12,column:14}},loc:{start:{line:12,column:29},end:{line:22,column:5}},line:12},"2":{name:"(anonymous_2)",decl:{start:{line:13,column:8},end:{line:13,column:9}},loc:{start:{line:13,column:36},end:{line:20,column:9}},line:13},"3":{name:"(anonymous_3)",decl:{start:{line:31,column:14},end:{line:31,column:15}},loc:{start:{line:31,column:37},end:{line:43,column:1}},line:31},"4":{name:"(anonymous_4)",decl:{start:{line:46,column:16},end:{line:46,column:17}},loc:{start:{line:46,column:27},end:{line:46,column:60}},line:46},"5":{name:"(anonymous_5)",decl:{start:{line:50,column:4},end:{line:50,column:5}},loc:{start:{line:50,column:21},end:{line:58,column:9}},line:50},"6":{name:"(anonymous_6)",decl:{start:{line:53,column:12},end:{line:53,column:13}},loc:{start:{line:53,column:34},end:{line:56,column:13}},line:53},"7":{name:"(anonymous_7)",decl:{start:{line:68,column:23},end:{line:68,column:24}},loc:{start:{line:68,column:49},end:{line:79,column:1}},line:68},"8":{name:"(anonymous_8)",decl:{start:{line:70,column:29},end:{line:70,column:30}},loc:{start:{line:70,column:38},end:{line:77,column:5}},line:70},"9":{name:"(anonymous_9)",decl:{start:{line:103,column:13},end:{line:103,column:14}},loc:{start:{line:103,column:31},end:{line:110,column:1}},line:103},"10":{name:"(anonymous_10)",decl:{start:{line:107,column:8},end:{line:107,column:9}},loc:{start:{line:107,column:16},end:{line:107,column:61}},line:107},"11":{name:"(anonymous_11)",decl:{start:{line:112,column:15},end:{line:112,column:16}},loc:{start:{line:112,column:22},end:{line:112,column:73}},line:112},"12":{name:"(anonymous_12)",decl:{start:{line:113,column:16},end:{line:113,column:17}},loc:{start:{line:113,column:23},end:{line:113,column:40}},line:113},"13":{name:"(anonymous_13)",decl:{start:{line:115,column:20},end:{line:115,column:21}},loc:{start:{line:115,column:33},end:{line:115,column:50}},line:115},"14":{name:"(anonymous_14)",decl:{start:{line:119,column:23},end:{line:119,column:24}},loc:{start:{line:119,column:46},end:{line:119,column:104}},line:119},"15":{name:"(anonymous_15)",decl:{start:{line:126,column:18},end:{line:126,column:19}},loc:{start:{line:126,column:70},end:{line:138,column:1}},line:126},"16":{name:"(anonymous_16)",decl:{start:{line:140,column:19},end:{line:140,column:20}},loc:{start:{line:140,column:26},end:{line:140,column:50}},line:140},"17":{name:"(anonymous_17)",decl:{start:{line:142,column:16},end:{line:142,column:17}},loc:{start:{line:142,column:25},end:{line:142,column:74}},line:142},"18":{name:"(anonymous_18)",decl:{start:{line:142,column:38},end:{line:142,column:39}},loc:{start:{line:142,column:53},end:{line:142,column:69}},line:142},"19":{name:"(anonymous_19)",decl:{start:{line:144,column:17},end:{line:144,column:18}},loc:{start:{line:144,column:27},end:{line:144,column:60}},line:144},"20":{name:"(anonymous_20)",decl:{start:{line:144,column:35},end:{line:144,column:36}},loc:{start:{line:144,column:43},end:{line:144,column:59}},line:144}},branchMap:{"0":{loc:{start:{line:14,column:12},end:{line:18,column:13}},type:"if",locations:[{start:{line:14,column:12},end:{line:18,column:13}},{start:{line:14,column:12},end:{line:18,column:13}}],line:14},"1":{loc:{start:{line:16,column:16},end:{line:16,column:82}},type:"if",locations:[{start:{line:16,column:16},end:{line:16,column:82}},{start:{line:16,column:16},end:{line:16,column:82}}],line:16},"2":{loc:{start:{line:35,column:8},end:{line:37,column:9}},type:"if",locations:[{start:{line:35,column:8},end:{line:37,column:9}},{start:{line:35,column:8},end:{line:37,column:9}}],line:35},"3":{loc:{start:{line:36,column:28},end:{line:36,column:62}},type:"cond-expr",locations:[{start:{line:36,column:55},end:{line:36,column:57}},{start:{line:36,column:60},end:{line:36,column:62}}],line:36},"4":{loc:{start:{line:41,column:4},end:{line:42,column:40}},type:"if",locations:[{start:{line:41,column:4},end:{line:42,column:40}},{start:{line:41,column:4},end:{line:42,column:40}}],line:41},"5":{loc:{start:{line:68,column:29},end:{line:68,column:44}},type:"default-arg",locations:[{start:{line:68,column:41},end:{line:68,column:44}}],line:68},"6":{loc:{start:{line:71,column:8},end:{line:76,column:9}},type:"if",locations:[{start:{line:71,column:8},end:{line:76,column:9}},{start:{line:71,column:8},end:{line:76,column:9}}],line:71},"7":{loc:{start:{line:71,column:12},end:{line:71,column:111}},type:"binary-expr",locations:[{start:{line:71,column:12},end:{line:71,column:28}},{start:{line:71,column:33},end:{line:71,column:56}},{start:{line:71,column:60},end:{line:71,column:88}},{start:{line:71,column:93},end:{line:71,column:111}}],line:71},"8":{loc:{start:{line:112,column:22},end:{line:112,column:73}},type:"binary-expr",locations:[{start:{line:112,column:22},end:{line:112,column:39}},{start:{line:112,column:43},end:{line:112,column:55}},{start:{line:112,column:59},end:{line:112,column:73}}],line:112},"9":{loc:{start:{line:119,column:55},end:{line:119,column:103}},type:"binary-expr",locations:[{start:{line:119,column:55},end:{line:119,column:84}},{start:{line:119,column:88},end:{line:119,column:103}}],line:119},"10":{loc:{start:{line:127,column:19},end:{line:127,column:47}},type:"cond-expr",locations:[{start:{line:127,column:40},end:{line:127,column:42}},{start:{line:127,column:45},end:{line:127,column:47}}],line:127},"11":{loc:{start:{line:130,column:8},end:{line:134,column:9}},type:"if",locations:[{start:{line:130,column:8},end:{line:134,column:9}},{start:{line:130,column:8},end:{line:134,column:9}}],line:130},"12":{loc:{start:{line:130,column:12},end:{line:130,column:61}},type:"binary-expr",locations:[{start:{line:130,column:12},end:{line:130,column:29}},{start:{line:130,column:33},end:{line:130,column:61}}],line:130}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0],"6":[0,0],"7":[0,0,0,0],"8":[0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"e25a352cd82475bf87f5cc72fc71114bacc5b813"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();cov_zrjjpwq99.s[0]++;const lastIn=arr=>{cov_zrjjpwq99.f[0]++;cov_zrjjpwq99.s[1]++;return arr[arr.length-1];};/**
 * view accesses a value at a nested location in an object.
 * view can also be used as a data pipeline, passing a value through
 * a progression of functions taking only one value
 * @param {object|array} obj Subject
 * @param {array} props Property or data pipeline functions
 * @returns {any} Value pointed to by props
 */cov_zrjjpwq99.s[2]++;const view=(obj,props)=>{cov_zrjjpwq99.f[1]++;cov_zrjjpwq99.s[3]++;return props.reduce((currentLevel,nextProp)=>{cov_zrjjpwq99.f[2]++;cov_zrjjpwq99.s[4]++;if(exists(currentLevel)){cov_zrjjpwq99.b[0][0]++;cov_zrjjpwq99.s[5]++;// Support for array methods
if(typeof nextProp==='function'){cov_zrjjpwq99.b[1][0]++;cov_zrjjpwq99.s[6]++;return nextProp(currentLevel);}else{cov_zrjjpwq99.b[1][1]++;}cov_zrjjpwq99.s[7]++;return currentLevel[nextProp];}else{cov_zrjjpwq99.b[0][1]++;}cov_zrjjpwq99.s[8]++;return undefined;},obj);};/**
 * chute puts a value into a nested location in an object, creating objects
 * or arrays when they are not present along the path
 * @param {object} obj Object to mutate
 * @param {array} props Array of properties pointing to a part of the object
 * @param {any} value New value for the specified location in obj
 */cov_zrjjpwq99.s[9]++;const chute=(obj,props,value)=>{cov_zrjjpwq99.f[3]++;let current=(cov_zrjjpwq99.s[10]++,obj);const allPropsButLast=(cov_zrjjpwq99.s[11]++,props.slice(0,-1));cov_zrjjpwq99.s[12]++;for(const prop of allPropsButLast){cov_zrjjpwq99.s[13]++;if(!defined(current[prop])){cov_zrjjpwq99.b[2][0]++;cov_zrjjpwq99.s[14]++;current[prop]=typeof prop==='number'?(cov_zrjjpwq99.b[3][0]++,[]):(cov_zrjjpwq99.b[3][1]++,{});}else{cov_zrjjpwq99.b[2][1]++;}cov_zrjjpwq99.s[15]++;current=current[prop];}cov_zrjjpwq99.s[16]++;if(!defined(value)){cov_zrjjpwq99.b[4][0]++;cov_zrjjpwq99.s[17]++;delete current[lastIn(props)];}else{cov_zrjjpwq99.b[4][1]++;cov_zrjjpwq99.s[18]++;current[lastIn(props)]=value;}};// Tells whether an object or array is empty
cov_zrjjpwq99.s[19]++;const isEmpty=subject=>{cov_zrjjpwq99.f[4]++;cov_zrjjpwq99.s[20]++;return Object.keys(subject).length===0;};// prefixKeys adds a string prefix to all shallow keys in an object
cov_zrjjpwq99.s[21]++;const prefixKeys=(obj,prefix)=>{cov_zrjjpwq99.f[5]++;cov_zrjjpwq99.s[22]++;return Object.keys(obj).reduce((accumulator,key)=>{cov_zrjjpwq99.f[6]++;cov_zrjjpwq99.s[23]++;return Object.assign(accumulator,{[`${prefix}${key}`]:obj[key]});},{});};/**
 * WARNING: flattenAsPaths is naive to cycles. Do not pass an object with cyclic references to flattenAsPaths. TODO: Implement cycle checking
 *
 * Builds path/value key/value pairs from a non-cyclic object
 * @param {object} obj Object to build paths for
 * @param {string} [delimiter] String to separate keys with
 * @return {object} Path tuples conaining [key]: value -> [path]: <value-pointed-to-by-path>
 */cov_zrjjpwq99.s[24]++;const flattenAsPaths=(obj,delimiter=(cov_zrjjpwq99.b[5][0]++,'.'))=>{cov_zrjjpwq99.f[7]++;const flattened=(cov_zrjjpwq99.s[25]++,{});cov_zrjjpwq99.s[26]++;Object.keys(obj).forEach(key=>{cov_zrjjpwq99.f[8]++;cov_zrjjpwq99.s[27]++;if((cov_zrjjpwq99.b[7][0]++,exists(obj[key]))&&((cov_zrjjpwq99.b[7][1]++,Array.isArray(obj[key]))||(cov_zrjjpwq99.b[7][2]++,typeof obj[key]==='object'))&&(cov_zrjjpwq99.b[7][3]++,!isEmpty(obj[key]))){cov_zrjjpwq99.b[6][0]++;const subFlattened=(cov_zrjjpwq99.s[28]++,flattenAsPaths(obj[key]));cov_zrjjpwq99.s[29]++;Object.assign(flattened,prefixKeys(subFlattened,`${key}${delimiter}`));}else{cov_zrjjpwq99.b[6][1]++;cov_zrjjpwq99.s[30]++;flattened[key]=obj[key];}});cov_zrjjpwq99.s[31]++;return flattened;};/**
 * Mask takes a subject and applies a mask to it recursively without deleting deeper parallel properties:
 *
 * Example:
 * obj = {
 *   prop1: { a: 1, b: 2 },
 *   prop2: 'a string'
 * }
 * maskObj = {
 *   prop1: { c: 3 },
 *   prop2: 'a different string'
 * }
 *
 * mask(obj, maskObj)
 * returns -> {
 *   prop1: { a: 1, b: 2, c: 3 },
 *   prop2: 'a different string'
 * }
 * @param {object|array} obj Subject object
 * @param {object|array} maskObj Masking object
 * @return {object|array} Masked object
 */cov_zrjjpwq99.s[32]++;const mask=(obj,maskObj)=>{cov_zrjjpwq99.f[9]++;const pathObj=(cov_zrjjpwq99.s[33]++,flattenAsPaths(maskObj,'.'));const masked=(cov_zrjjpwq99.s[34]++,deepClone(obj));cov_zrjjpwq99.s[35]++;Object.keys(pathObj).forEach(path=>{cov_zrjjpwq99.f[10]++;cov_zrjjpwq99.s[36]++;return chute(masked,path.split('.'),pathObj[path]);});cov_zrjjpwq99.s[37]++;return masked;};cov_zrjjpwq99.s[38]++;const exists=val=>{cov_zrjjpwq99.f[11]++;cov_zrjjpwq99.s[39]++;return(cov_zrjjpwq99.b[8][0]++,val!==undefined)&&(cov_zrjjpwq99.b[8][1]++,val!==null)&&(cov_zrjjpwq99.b[8][2]++,val!=='null');};cov_zrjjpwq99.s[40]++;const defined=val=>{cov_zrjjpwq99.f[12]++;cov_zrjjpwq99.s[41]++;return val!==undefined;};cov_zrjjpwq99.s[42]++;const firstExists=(...list)=>{cov_zrjjpwq99.f[13]++;cov_zrjjpwq99.s[43]++;return list.find(exists);};// Returns the next element in the list. Returns undefined if 'element' is not found or if
// it lies at the end of the sequence
cov_zrjjpwq99.s[44]++;const nextInSequence=(sequence,element)=>{cov_zrjjpwq99.f[14]++;cov_zrjjpwq99.s[45]++;return sequence[(cov_zrjjpwq99.b[9][0]++,sequence.indexOf(element)+1)||(cov_zrjjpwq99.b[9][1]++,sequence.length)];};/**
 * WARNING: deepClone is naive to cycles. Do not pass an object with cyclic references to deepClone. TODO: Implement optional cycle checking
 * @param {object} obj Object to clone
 * @returns {object} Deep cloned object
 */cov_zrjjpwq99.s[46]++;const deepClone=(obj/* TODO: implement , checkCycles = true */)=>{cov_zrjjpwq99.f[15]++;const cloned=(cov_zrjjpwq99.s[47]++,Array.isArray(obj)?(cov_zrjjpwq99.b[10][0]++,[]):(cov_zrjjpwq99.b[10][1]++,{}));cov_zrjjpwq99.s[48]++;for(const key in obj){cov_zrjjpwq99.s[49]++;if((cov_zrjjpwq99.b[12][0]++,obj[key]!==null)&&(cov_zrjjpwq99.b[12][1]++,typeof obj[key]==='object')){cov_zrjjpwq99.b[11][0]++;cov_zrjjpwq99.s[50]++;cloned[key]=deepClone(obj[key]);}else{cov_zrjjpwq99.b[11][1]++;cov_zrjjpwq99.s[51]++;cloned[key]=obj[key];}}cov_zrjjpwq99.s[52]++;return cloned;};cov_zrjjpwq99.s[53]++;const makeUnique=arr=>{cov_zrjjpwq99.f[16]++;cov_zrjjpwq99.s[54]++;return Array.from(new Set(arr));};cov_zrjjpwq99.s[55]++;const flatten=array=>{cov_zrjjpwq99.f[17]++;cov_zrjjpwq99.s[56]++;return array.reduce((acc,elem)=>{cov_zrjjpwq99.f[18]++;cov_zrjjpwq99.s[57]++;return acc.concat(elem);},[]);};cov_zrjjpwq99.s[58]++;const disjoint=(a,b)=>{cov_zrjjpwq99.f[19]++;cov_zrjjpwq99.s[59]++;return!a.some(elem=>{cov_zrjjpwq99.f[20]++;cov_zrjjpwq99.s[60]++;return b.includes(elem);});};cov_zrjjpwq99.s[61]++;module.exports={view,chute,exists,defined,firstExists,nextInSequence,deepClone,lastIn,isEmpty,prefixKeys,flattenAsPaths,mask,disjoint,makeUnique,flatten};