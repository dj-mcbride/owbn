var cov_wkf62y399=function(){var path="/opt/repos/app-owbn/lib/rpc/common/crudCharacter.js";var hash="d784c343b3915a86fd7a71639f9087961f647d5c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/opt/repos/app-owbn/lib/rpc/common/crudCharacter.js",statementMap:{"0":{start:{line:2,column:21},end:{line:2,column:46}},"1":{start:{line:3,column:19},end:{line:3,column:38}},"2":{start:{line:4,column:11},end:{line:4,column:42}},"3":{start:{line:12,column:4},end:{line:12,column:95}},"4":{start:{line:13,column:31},end:{line:18,column:6}},"5":{start:{line:21,column:4},end:{line:21,column:101}},"6":{start:{line:25,column:4},end:{line:49,column:5}},"7":{start:{line:26,column:22},end:{line:29,column:9}},"8":{start:{line:31,column:8},end:{line:31,column:83}},"9":{start:{line:32,column:26},end:{line:32,column:49}},"10":{start:{line:34,column:8},end:{line:44,column:9}},"11":{start:{line:35,column:12},end:{line:35,column:99}},"12":{start:{line:37,column:12},end:{line:37,column:38}},"13":{start:{line:38,column:12},end:{line:38,column:68}},"14":{start:{line:39,column:12},end:{line:39,column:50}},"15":{start:{line:41,column:12},end:{line:41,column:94}},"16":{start:{line:42,column:12},end:{line:42,column:76}},"17":{start:{line:43,column:12},end:{line:43,column:50}},"18":{start:{line:46,column:8},end:{line:46,column:86}},"19":{start:{line:47,column:8},end:{line:47,column:60}},"20":{start:{line:48,column:8},end:{line:48,column:46}},"21":{start:{line:52,column:4},end:{line:52,column:30}},"22":{start:{line:56,column:4},end:{line:56,column:97}},"23":{start:{line:58,column:31},end:{line:63,column:6}},"24":{start:{line:67,column:4},end:{line:72,column:5}},"25":{start:{line:68,column:8},end:{line:68,column:91}},"26":{start:{line:69,column:8},end:{line:69,column:74}},"27":{start:{line:70,column:8},end:{line:70,column:46}},"28":{start:{line:71,column:8},end:{line:71,column:34}},"29":{start:{line:73,column:4},end:{line:78,column:5}},"30":{start:{line:74,column:8},end:{line:74,column:90}},"31":{start:{line:75,column:8},end:{line:75,column:71}},"32":{start:{line:76,column:8},end:{line:76,column:46}},"33":{start:{line:77,column:8},end:{line:77,column:34}},"34":{start:{line:82,column:22},end:{line:85,column:9}},"35":{start:{line:87,column:8},end:{line:87,column:83}},"36":{start:{line:88,column:26},end:{line:88,column:49}},"37":{start:{line:90,column:8},end:{line:113,column:9}},"38":{start:{line:91,column:12},end:{line:91,column:97}},"39":{start:{line:93,column:37},end:{line:97,column:13}},"40":{start:{line:99,column:12},end:{line:108,column:13}},"41":{start:{line:101,column:16},end:{line:101,column:49}},"42":{start:{line:102,column:16},end:{line:102,column:72}},"43":{start:{line:103,column:16},end:{line:103,column:54}},"44":{start:{line:105,column:16},end:{line:105,column:110}},"45":{start:{line:106,column:16},end:{line:106,column:68}},"46":{start:{line:107,column:16},end:{line:107,column:54}},"47":{start:{line:110,column:12},end:{line:110,column:107}},"48":{start:{line:111,column:12},end:{line:111,column:89}},"49":{start:{line:112,column:12},end:{line:112,column:50}},"50":{start:{line:116,column:4},end:{line:116,column:30}},"51":{start:{line:120,column:4},end:{line:120,column:97}},"52":{start:{line:122,column:31},end:{line:127,column:6}},"53":{start:{line:131,column:4},end:{line:136,column:5}},"54":{start:{line:132,column:8},end:{line:132,column:91}},"55":{start:{line:133,column:8},end:{line:133,column:74}},"56":{start:{line:134,column:8},end:{line:134,column:46}},"57":{start:{line:135,column:8},end:{line:135,column:34}},"58":{start:{line:137,column:4},end:{line:142,column:5}},"59":{start:{line:138,column:8},end:{line:138,column:90}},"60":{start:{line:139,column:8},end:{line:139,column:71}},"61":{start:{line:140,column:8},end:{line:140,column:46}},"62":{start:{line:141,column:8},end:{line:141,column:34}},"63":{start:{line:146,column:22},end:{line:149,column:9}},"64":{start:{line:151,column:8},end:{line:151,column:83}},"65":{start:{line:152,column:26},end:{line:152,column:49}},"66":{start:{line:154,column:8},end:{line:170,column:9}},"67":{start:{line:155,column:12},end:{line:155,column:97}},"68":{start:{line:156,column:12},end:{line:165,column:13}},"69":{start:{line:158,column:16},end:{line:158,column:42}},"70":{start:{line:159,column:16},end:{line:159,column:72}},"71":{start:{line:160,column:16},end:{line:160,column:54}},"72":{start:{line:162,column:16},end:{line:162,column:110}},"73":{start:{line:163,column:16},end:{line:163,column:68}},"74":{start:{line:164,column:16},end:{line:164,column:54}},"75":{start:{line:167,column:12},end:{line:167,column:107}},"76":{start:{line:168,column:12},end:{line:168,column:89}},"77":{start:{line:169,column:12},end:{line:169,column:50}},"78":{start:{line:173,column:4},end:{line:173,column:30}},"79":{start:{line:176,column:0},end:{line:176,column:59}}},fnMap:{"0":{name:"createSheet",decl:{start:{line:11,column:15},end:{line:11,column:26}},loc:{start:{line:11,column:34},end:{line:53,column:1}},line:11},"1":{name:"updateSheet",decl:{start:{line:55,column:15},end:{line:55,column:26}},loc:{start:{line:55,column:36},end:{line:117,column:1}},line:55},"2":{name:"deleteSheet",decl:{start:{line:119,column:15},end:{line:119,column:26}},loc:{start:{line:119,column:36},end:{line:174,column:1}},line:119}},branchMap:{"0":{loc:{start:{line:34,column:8},end:{line:44,column:9}},type:"if",locations:[{start:{line:34,column:8},end:{line:44,column:9}},{start:{line:34,column:8},end:{line:44,column:9}}],line:34},"1":{loc:{start:{line:67,column:4},end:{line:72,column:5}},type:"if",locations:[{start:{line:67,column:4},end:{line:72,column:5}},{start:{line:67,column:4},end:{line:72,column:5}}],line:67},"2":{loc:{start:{line:73,column:4},end:{line:78,column:5}},type:"if",locations:[{start:{line:73,column:4},end:{line:78,column:5}},{start:{line:73,column:4},end:{line:78,column:5}}],line:73},"3":{loc:{start:{line:90,column:8},end:{line:113,column:9}},type:"if",locations:[{start:{line:90,column:8},end:{line:113,column:9}},{start:{line:90,column:8},end:{line:113,column:9}}],line:90},"4":{loc:{start:{line:131,column:4},end:{line:136,column:5}},type:"if",locations:[{start:{line:131,column:4},end:{line:136,column:5}},{start:{line:131,column:4},end:{line:136,column:5}}],line:131},"5":{loc:{start:{line:137,column:4},end:{line:142,column:5}},type:"if",locations:[{start:{line:137,column:4},end:{line:142,column:5}},{start:{line:137,column:4},end:{line:142,column:5}}],line:137},"6":{loc:{start:{line:154,column:8},end:{line:170,column:9}},type:"if",locations:[{start:{line:154,column:8},end:{line:170,column:9}},{start:{line:154,column:8},end:{line:170,column:9}}],line:154}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"d784c343b3915a86fd7a71639f9087961f647d5c"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();/* globals log database */const{Response}=(cov_wkf62y399.s[0]++,require('../../Response'));const Collection=(cov_wkf62y399.s[1]++,'owbnVampireSheets');const db=(cov_wkf62y399.s[2]++,database.collection(Collection));/**
 * Tests to see if the devices are synced.
 * @param {object} sheet Character Sheet
 * @returns {Object} Returned object showing success or failure of action
 */async function createSheet(sheet){cov_wkf62y399.f[0]++;cov_wkf62y399.s[3]++;log.debug(`Starting: crudCharacter.createSheet. sheet object : ${JSON.stringify(sheet)} `);const validationResponse=(cov_wkf62y399.s[4]++,new Response({from:'createSheet',responseCode:400,message:'',step:'Create Sheet'}));// Does incoming sheet match template regulations?
cov_wkf62y399.s[5]++;log.debug('Update: crudCharacter.createSheet. Does incoming sheet match template regulations? ');// This is what we are going to use for our sheet definition critera.
// No player may have two characters of the same name.
cov_wkf62y399.s[6]++;try{const query=(cov_wkf62y399.s[7]++,{name:sheet.name,player:sheet.player});// Is sheet currently in DB?
cov_wkf62y399.s[8]++;log.debug('Update: crudCharacter.createSheet. Is sheet currently in DB? ');const deviceCol=(cov_wkf62y399.s[9]++,await db.findOne(query));cov_wkf62y399.s[10]++;if(!deviceCol){cov_wkf62y399.b[0][0]++;cov_wkf62y399.s[11]++;log.debug('Update: crudCharacter.createSheet : Sheet not found in DB.   Adding Sheet');// Insert Sheet into DB
cov_wkf62y399.s[12]++;await db.insertOne(sheet);cov_wkf62y399.s[13]++;validationResponse.message='Character sheet entered.';cov_wkf62y399.s[14]++;validationResponse.responseCode=200;}else{cov_wkf62y399.b[0][1]++;cov_wkf62y399.s[15]++;log.debug('Ending: crudCharacter.createSheet : duplicate sheet, throwing error ');cov_wkf62y399.s[16]++;validationResponse.message='Duplicate character sheet entry.';cov_wkf62y399.s[17]++;validationResponse.responseCode=455;}}catch(err){cov_wkf62y399.s[18]++;log.error(`Ending: crudCharacter.createSheet : Sheet insert failed : ${err}`);cov_wkf62y399.s[19]++;validationResponse.message='Sheet insert failed.';cov_wkf62y399.s[20]++;validationResponse.responseCode=457;}// Return Results
cov_wkf62y399.s[21]++;return validationResponse;}async function updateSheet(updates){cov_wkf62y399.f[1]++;cov_wkf62y399.s[22]++;log.debug(`Starting: crudCharacter.updateSheet. sheet object : ${JSON.stringify(updates)} `);const validationResponse=(cov_wkf62y399.s[23]++,new Response({from:'updateSheet',responseCode:400,message:'',step:'Update Sheet'}));// Updates must always include player and character name.  Without those, there can be no update.
// Throw an error if his happens.
cov_wkf62y399.s[24]++;if(!updates.name){cov_wkf62y399.b[1][0]++;cov_wkf62y399.s[25]++;log.debug('Update: crudCharacter.updateSheet. value of character name not found!');cov_wkf62y399.s[26]++;validationResponse.message='Value of character name not found!';cov_wkf62y399.s[27]++;validationResponse.responseCode=456;cov_wkf62y399.s[28]++;return validationResponse;}else{cov_wkf62y399.b[1][1]++;}cov_wkf62y399.s[29]++;if(!updates.player){cov_wkf62y399.b[2][0]++;cov_wkf62y399.s[30]++;log.debug('Starting: crudCharacter.updateSheet. value of player name not found!');cov_wkf62y399.s[31]++;validationResponse.message='Value of player name not found!';cov_wkf62y399.s[32]++;validationResponse.responseCode=456;cov_wkf62y399.s[33]++;return validationResponse;}else{cov_wkf62y399.b[2][1]++;}// Make sure that the character exists in the DB.   If the character does not exist, we don't want
// to create a fragmented character
const query=(cov_wkf62y399.s[34]++,{name:updates.name,player:updates.player});// Is sheet currently in DB?
cov_wkf62y399.s[35]++;log.debug('Update: crudCharacter.updateSheet. Is sheet currently in DB? ');const deviceCol=(cov_wkf62y399.s[36]++,await db.findOne(query));cov_wkf62y399.s[37]++;if(deviceCol){cov_wkf62y399.b[3][0]++;cov_wkf62y399.s[38]++;log.debug('Update: crudCharacter.updateSheet : Sheet found in DB.   Updating Sheet');// Build the update object
const updateOneObject=(cov_wkf62y399.s[39]++,{filter:{name:updates.name,player:updates.player},update:{updates},upsert:true});cov_wkf62y399.s[40]++;try{cov_wkf62y399.s[41]++;// Update the character sheet
await db.update(updateOneObject);cov_wkf62y399.s[42]++;validationResponse.message='Character sheet updated.';cov_wkf62y399.s[43]++;validationResponse.responseCode=200;}catch(err){cov_wkf62y399.s[44]++;log.error(`Ending: crudCharacter.updateSheet : Sheet update failed : ${JSON.stringify(err)}`);cov_wkf62y399.s[45]++;validationResponse.message='Sheet insert failed.';cov_wkf62y399.s[46]++;validationResponse.responseCode=400;}}else{cov_wkf62y399.b[3][1]++;cov_wkf62y399.s[47]++;log.debug('Ending: crudCharacter.updateSheet : Character sheet not found!  Unable to update.');cov_wkf62y399.s[48]++;validationResponse.message='Character sheet not found!  Unable to update.';cov_wkf62y399.s[49]++;validationResponse.responseCode=400;}// Return Results
cov_wkf62y399.s[50]++;return validationResponse;}async function deleteSheet(updates){cov_wkf62y399.f[2]++;cov_wkf62y399.s[51]++;log.debug(`Starting: crudCharacter.deleteSheet. sheet object : ${JSON.stringify(updates)} `);const validationResponse=(cov_wkf62y399.s[52]++,new Response({from:'deleteSheet',responseCode:400,message:'',step:'Delete Sheet'}));// Updates must always include player and character name.  Without those, there can be no update.
// Throw an error if his happens.
cov_wkf62y399.s[53]++;if(!updates.name){cov_wkf62y399.b[4][0]++;cov_wkf62y399.s[54]++;log.debug('Update: crudCharacter.deleteSheet. value of character name not found!');cov_wkf62y399.s[55]++;validationResponse.message='Value of character name not found!';cov_wkf62y399.s[56]++;validationResponse.responseCode=456;cov_wkf62y399.s[57]++;return validationResponse;}else{cov_wkf62y399.b[4][1]++;}cov_wkf62y399.s[58]++;if(!updates.player){cov_wkf62y399.b[5][0]++;cov_wkf62y399.s[59]++;log.debug('Starting: crudCharacter.deleteSheet. value of player name not found!');cov_wkf62y399.s[60]++;validationResponse.message='Value of player name not found!';cov_wkf62y399.s[61]++;validationResponse.responseCode=456;cov_wkf62y399.s[62]++;return validationResponse;}else{cov_wkf62y399.b[5][1]++;}// Make sure that the character exists in the DB.   If the character does not exist, we don't want
// to create a fragmented character
const query=(cov_wkf62y399.s[63]++,{name:updates.name,player:updates.player});// Is sheet currently in DB?
cov_wkf62y399.s[64]++;log.debug('Update: crudCharacter.deleteSheet. Is sheet currently in DB? ');const deviceCol=(cov_wkf62y399.s[65]++,await db.findOne(query));cov_wkf62y399.s[66]++;if(deviceCol){cov_wkf62y399.b[6][0]++;cov_wkf62y399.s[67]++;log.debug('Update: crudCharacter.deleteSheet : Sheet found in DB.   Updating Sheet');cov_wkf62y399.s[68]++;try{cov_wkf62y399.s[69]++;// Update the character sheet
await db.deleteOne(query);cov_wkf62y399.s[70]++;validationResponse.message='Character sheet deleted.';cov_wkf62y399.s[71]++;validationResponse.responseCode=200;}catch(err){cov_wkf62y399.s[72]++;log.error(`Ending: crudCharacter.deleteSheet : Sheet insert failed : ${JSON.stringify(err)}`);cov_wkf62y399.s[73]++;validationResponse.message='Sheet delete failed.';cov_wkf62y399.s[74]++;validationResponse.responseCode=400;}}else{cov_wkf62y399.b[6][1]++;cov_wkf62y399.s[75]++;log.debug('Ending: crudCharacter.deleteSheet : Character sheet not found!  Unable to delete.');cov_wkf62y399.s[76]++;validationResponse.message='Character sheet not found!  Unable to delete.';cov_wkf62y399.s[77]++;validationResponse.responseCode=400;}// Return Results
cov_wkf62y399.s[78]++;return validationResponse;}cov_wkf62y399.s[79]++;module.exports={createSheet,updateSheet,deleteSheet};