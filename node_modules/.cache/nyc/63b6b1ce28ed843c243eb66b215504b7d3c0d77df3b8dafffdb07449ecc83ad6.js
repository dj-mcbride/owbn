var cov_f5mybjsfk=function(){var path="/opt/repos/app-owbn/lib/rpc/common/characterSheet.js";var hash="f5cb37a69e8a3ff7cb910592a30481ec7e0ed91c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/opt/repos/app-owbn/lib/rpc/common/characterSheet.js",statementMap:{"0":{start:{line:2,column:21},end:{line:2,column:46}},"1":{start:{line:3,column:19},end:{line:3,column:38}},"2":{start:{line:4,column:11},end:{line:4,column:42}},"3":{start:{line:12,column:4},end:{line:12,column:95}},"4":{start:{line:13,column:4},end:{line:13,column:97}},"5":{start:{line:14,column:31},end:{line:19,column:6}},"6":{start:{line:22,column:4},end:{line:22,column:101}},"7":{start:{line:23,column:4},end:{line:23,column:102}},"8":{start:{line:27,column:4},end:{line:53,column:5}},"9":{start:{line:28,column:22},end:{line:31,column:9}},"10":{start:{line:33,column:8},end:{line:33,column:83}},"11":{start:{line:34,column:8},end:{line:34,column:84}},"12":{start:{line:35,column:26},end:{line:35,column:49}},"13":{start:{line:37,column:8},end:{line:37,column:99}},"14":{start:{line:38,column:8},end:{line:49,column:9}},"15":{start:{line:39,column:12},end:{line:39,column:99}},"16":{start:{line:40,column:12},end:{line:40,column:101}},"17":{start:{line:42,column:12},end:{line:42,column:38}},"18":{start:{line:43,column:12},end:{line:43,column:68}},"19":{start:{line:44,column:12},end:{line:44,column:50}},"20":{start:{line:46,column:12},end:{line:46,column:94}},"21":{start:{line:47,column:12},end:{line:47,column:96}},"22":{start:{line:48,column:12},end:{line:48,column:76}},"23":{start:{line:51,column:8},end:{line:51,column:86}},"24":{start:{line:52,column:8},end:{line:52,column:60}},"25":{start:{line:56,column:4},end:{line:56,column:30}},"26":{start:{line:59,column:0},end:{line:59,column:33}}},fnMap:{"0":{name:"createSheet",decl:{start:{line:11,column:15},end:{line:11,column:26}},loc:{start:{line:11,column:34},end:{line:57,column:1}},line:11}},branchMap:{"0":{loc:{start:{line:38,column:8},end:{line:49,column:9}},type:"if",locations:[{start:{line:38,column:8},end:{line:49,column:9}},{start:{line:38,column:8},end:{line:49,column:9}}],line:38}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},f:{"0":0},b:{"0":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"f5cb37a69e8a3ff7cb910592a30481ec7e0ed91c"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();/* globals log cogs database auditTrail */const{Response}=(cov_f5mybjsfk.s[0]++,require('../../Response'));const Collection=(cov_f5mybjsfk.s[1]++,'owbnVampireSheets');const db=(cov_f5mybjsfk.s[2]++,database.collection(Collection));/**
 * Tests to see if the devices are synced.
 * @param {object} sheet Character Sheet
 * @returns {Object} Returned object showing success or failure of action
 */async function createSheet(sheet){cov_f5mybjsfk.f[0]++;cov_f5mybjsfk.s[3]++;log.trace(`Starting: crudCharacter.createSheet. sheet object : ${JSON.stringify(sheet)} `);cov_f5mybjsfk.s[4]++;console.log(`Starting: crudCharacter.createSheet. sheet object : ${JSON.stringify(sheet)} `);const validationResponse=(cov_f5mybjsfk.s[5]++,new Response({from:'createSheet',responseCode:400,message:'',step:'Create Sheet'}));// Does incoming sheet match template regulations?
cov_f5mybjsfk.s[6]++;log.debug('Update: crudCharacter.createSheet. Does incoming sheet match template regulations? ');cov_f5mybjsfk.s[7]++;console.log('Update: crudCharacter.createSheet. Does incoming sheet match template regulations?');// This is what we are going to use for our sheet definition critera.
// No player may have two characters of the same name.
cov_f5mybjsfk.s[8]++;try{const query=(cov_f5mybjsfk.s[9]++,{name:sheet.name,player:sheet.player});// Is sheet currently in DB?
cov_f5mybjsfk.s[10]++;log.debug('Update: crudCharacter.createSheet. Is sheet currently in DB? ');cov_f5mybjsfk.s[11]++;console.log('Update: crudCharacter.createSheet. Is sheet currently in DB?');const deviceCol=(cov_f5mybjsfk.s[12]++,await db.findOne(query));cov_f5mybjsfk.s[13]++;console.log(`Update: crudCharacter.createSheet. deviceCol: ${JSON.stringify(deviceCol)} `);cov_f5mybjsfk.s[14]++;if(!deviceCol){cov_f5mybjsfk.b[0][0]++;cov_f5mybjsfk.s[15]++;log.debug('Update: crudCharacter.createSheet : Sheet not found in DB.   Adding Sheet');cov_f5mybjsfk.s[16]++;console.log('Update: crudCharacter.createSheet : Sheet not found in DB.   Adding Sheet');// Insert Sheet into DB
cov_f5mybjsfk.s[17]++;await db.insertOne(sheet);cov_f5mybjsfk.s[18]++;validationResponse.message='Character sheet entered.';cov_f5mybjsfk.s[19]++;validationResponse.responseCode=200;}else{cov_f5mybjsfk.b[0][1]++;cov_f5mybjsfk.s[20]++;log.debug('Ending: crudCharacter.createSheet : duplicate sheet, throwing error ');cov_f5mybjsfk.s[21]++;console.log('Ending: crudCharacter.createSheet : duplicate sheet, throwing error ');cov_f5mybjsfk.s[22]++;validationResponse.message='Duplicate character sheet entry.';}}catch(err){cov_f5mybjsfk.s[23]++;log.error(`Ending: crudCharacter.createSheet : Sheet insert failed : ${err}`);cov_f5mybjsfk.s[24]++;validationResponse.message='Sheet insert failed.';}// Return Results
cov_f5mybjsfk.s[25]++;return validationResponse;}cov_f5mybjsfk.s[26]++;module.exports={createSheet};